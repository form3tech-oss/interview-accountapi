{
	"info": {
		"_postman_id": "a54977d0-d2ba-4c3b-999e-90246c7e312c",
		"name": "Form3 API - Production",
		"description": "![banner](https://s3-eu-west-1.amazonaws.com/developer.form3.tech/images/api-banner5.png)\n\nWelcome to the Form3 API Postman collection. \n\nThe API documentation can be found at: http://api-docs.form3.tech/\n\nThe Form3 API lets you send and receive payments through a number of different payment schemes such as Faster Payments, Bacs, SEPA and others.\n\nThe Form3 API is based on the principle of\n[REST](https://en.wikipedia.org/wiki/Representational_state_transfer).\nIt uses conventions that aim to increase productivity and ease of adoption. As such we have chosen to built our API around the\n[json:api](http://jsonapi.org/) specification\n\nFind out more about our solution by visiting our website: [Form3 Financial Cloud](https://form3.tech/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorisation",
			"item": [
				{
					"name": "/oauth2/token (your credentials)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['access token is present'] = _.has(json, 'access_token');",
									"    tests['token type is bearer'] = json.token_type == 'Bearer';",
									"    ",
									"    postman.setEnvironmentVariable(\"token\", json.access_token);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{client_id}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{client_secret}}",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"value": true,
									"type": "boolean"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"value": "Basic"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/oauth2/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						},
						"description": "Create a client access token"
					},
					"response": []
				}
			]
		},
		{
			"name": "Audit",
			"item": [
				{
					"name": "Notifications",
					"item": [
						{
							"name": "/entries/subscriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/subscriptions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"subscriptions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/subscriptions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/subscriptions/{{subscription_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"subscriptions",
										"{{subscription_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scheme Messages",
					"item": [
						{
							"name": "/entries/scheme_messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/scheme_messages",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"scheme_messages"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/scheme_messages/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/scheme_messages/{{scheme_message_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"scheme_messages",
										"{{scheme_message_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/scheme_message_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/scheme_message_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"scheme_message_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/scheme_message_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/scheme_message_admissions/{{scheme_message_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"scheme_message_admissions",
										"{{scheme_message_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Organisation",
					"item": [
						{
							"name": "/entries/accounts/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/accounts",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"accounts"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/accounts/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/accounts/{{account_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"accounts",
										"{{account_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/Organisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/Organisation",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"Organisation"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/Organisation/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/Organisation/{{organisation_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"Organisation",
										"{{organisation_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Security",
					"item": [
						{
							"name": "/entries/User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/User",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"User"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/User/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/User/{{user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"User",
										"{{user_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/Role",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"Role"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/Role/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/Role/{{role_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"Role",
										"{{role_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "/entries/payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/payments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"payments"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/payments/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/payments/{{payment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"payments",
										"{{payment_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/payment_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/payment_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"payment_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/payment_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/payment_admissions/{{admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"payment_admissions",
										"{{admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/payment_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/payment_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"payment_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/payment_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/payment_submissions/{{submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"payment_submissions",
										"{{submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/returns",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/returns",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"returns"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/returns/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/returns/{{return_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"returns",
										"{{return_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/return_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/return_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"return_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/return_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/return_admissions/{{return_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"return_admissions",
										"{{return_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/return_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/return_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"return_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/return_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/return_submissions/{{return_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"return_submissions",
										"{{return_submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/return_reversals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/return_reversals",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"return_reversals"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/return_reversals/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/return_reversals/{{return_reversal_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"return_reversals",
										"{{return_reversal_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/return_reversal_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/return_reversal_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"return_reversal_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/return_reversal_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/return_reversal_admissions/{{return_reversal_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"return_reversal_admissions",
										"{{return_reversal_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/reversals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/reversals",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"reversals"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/reversals/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/reversals/{{reversal_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"reversals",
										"{{reversal_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/reversal_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/reversal_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"reversal_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/reversal_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/reversal_admissions/{{reversal_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"reversal_admissions",
										"{{reversal_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/reversal_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/reversal_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"reversal_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/reversal_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/reversal_submissions/{{reversal_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"reversal_submissions",
										"{{reversal_submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recalls",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recalls",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recalls"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recalls/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recalls/{{recall_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recalls",
										"{{recall_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recalls_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recalls_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_submissions/{{recall_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_submissions",
										"{{recall_submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recalls_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recalls_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_admissions/{{recall_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_admissions",
										"{{recall_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_decisions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_decisions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_decisions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_decisions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_decisions/{{recall_decision_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_decisions",
										"{{recall_decision_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_decision_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_decision_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_decision_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_decision_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_decision_admissions/{{recall_decision_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_decision_admissions",
										"{{recall_decision_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_decision_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_decision_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_decision_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_decision_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_decision_submissions/{{recall_decision_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_decision_submissions",
										"{{recall_decision_submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_reversals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_reversals",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_reversals"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_reverals/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_reversals/{{recall_reversal_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_reversals",
										"{{recall_reversal_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_reversal_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_reversal_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_reversal_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/recall_reversal_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/recall_reversal_admissions/{{recall_reversal_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"recall_reversal_admissions",
										"{{recall_reversal_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Direct Debits",
					"item": [
						{
							"name": "/entries/direct_debits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debits",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debits"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debits/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debits/{{direct_debit_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debits",
										"{{direct_debit_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_admissions/{{direct_debit_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_admissions",
										"{{direct_debit_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_submissions/{{direct_debit_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_submissions",
										"{{direct_debit_submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_reversals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_reversals",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_reversals"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_reversals/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_reversals/{{direct_debit_reversal_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_reversals",
										"{{direct_debit_reversal_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_reversal_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_reversal_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_reversal_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_reversal_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_reversal_admissions/{{direct_debit_reversal_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_reversal_admissions",
										"{{direct_debit_reversal_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_returns",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_returns",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_returns"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_returns/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_returns/{{direct_debit_return_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_returns",
										"{{direct_debit_return_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_return_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_return_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_return_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/direct_debit_return_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/direct_debit_return_submissions/{{direct_debit_return_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"direct_debit_return_submissions",
										"{{direct_debit_return_submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mandates",
					"item": [
						{
							"name": "/entries/mandates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/mandates",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"mandates"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/mandates/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/mandates/{{mandate_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"mandates",
										"{{mandate_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/mandate_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/mandate_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"mandate_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/mandate_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/mandate_admissions/{{mandate_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"mandate_admissions",
										"{{mandate_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/mandate_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/mandate_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"mandate_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/mandate_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/mandate_submissions/{{mandate_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"mandate_submissions",
										"{{mandate_submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Claims",
					"item": [
						{
							"name": "/entries/claims",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/claims",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"claims"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/claims/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/claims/{{claim_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"claims",
										"{{claim_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/claim_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/claim_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"claim_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/claim_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/claim_submissions/{{claim_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"claim_submissions",
										"{{claim_submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/claim_reversals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/claim_reversals",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"claim_reversals"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/claim_reversals/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/claim_reversals/{{claim_reversal_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"claim_reversals",
										"{{claim_reversal_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/claim_reversal_submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/claim_reversal_submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"claim_reversal_submissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/claim_reversal_submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/claim_reversal_submissions/{{claim_reversal_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"claim_reversal_submissions",
										"{{claim_reversal_submission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reports",
					"item": [
						{
							"name": "/entries/reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/reports",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"reports"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/reports/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/reports/{{report_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"reports",
										"{{report_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/report_admissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/report_admissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"report_admissions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/entries/report_admissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/audit/entries/report_admissions/{{report_admission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"audit",
										"entries",
										"report_admissions",
										"{{report_admission_id}}"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[action_time_from]",
											"value": "2017-07-07T09:30:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[action_time_to]",
											"value": "2017-07-07T09:31:00.000Z",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "/subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"subscription_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"subscriptions\",\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n      \"callback_uri\": \"https://your-queue-url.com\",\n      \"callback_transport\": \"queue\",\n      \"event_type\": \"updated\",\n      \"record_type\": \"payment_submissions\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/notification/subscriptions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/subscriptions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"subscriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/subscriptions/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/subscriptions/{{subscription_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"subscriptions",
								"{{subscription_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/subscriptions/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"subscription_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							},
							{
								"key": "Digest",
								"type": "text",
								"value": "{{request_signing_digest}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{subscription_id}}\",\n    \"version\": 1,\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n      \"deactivated\": false\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/notification/subscriptions/{{subscription_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"subscriptions",
								"{{subscription_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 204 no content\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/notification/subscriptions/{{subscription_id}}?version=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"subscriptions",
								"{{subscription_id}}"
							],
							"query": [
								{
									"key": "version",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/subscriptions/{id}/errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/subscriptions/{{subscription_id}}/errors",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"subscriptions",
								"{{subscription_id}}",
								"errors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "/reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    }",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "last",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "5",
									"disabled": true
								},
								{
									"key": "filter[organisation_id]",
									"value": "{{organisation_id}}",
									"disabled": true
								},
								{
									"key": "filter[report_type]",
									"value": "Balance",
									"disabled": true
								},
								{
									"key": "filter[report_type_description]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[report_source]",
									"value": "FPS",
									"disabled": true
								},
								{
									"key": "filter[created_on_after]",
									"value": "2018-01-01T00:00:00.000Z",
									"disabled": true
								},
								{
									"key": "filter[created_on_before]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[modified_on_after]",
									"value": "2018-01-01T00:00:00.000Z",
									"disabled": true
								},
								{
									"key": "filter[modified_on_before]",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/reports/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    postman.setEnvironmentVariable(\"report_version\", json.data.version);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports/{{report_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports",
								"{{report_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/reports/{id} (PDF)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/pdf"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports/{{report_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports",
								"{{report_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/reports/{id} (TXT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports/{{report_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports",
								"{{report_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/reports/{id} (CSV)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/csv"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports/{{report_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports",
								"{{report_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/reports/{id} (Zipped XML)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/xml+zip"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports/{{report_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports",
								"{{report_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/reports/{id} (XML)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports/{{report_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports",
								"{{report_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/reports/{id} (Zipped CSV)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/csv+zip"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports/{{report_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports",
								"{{report_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/reports/{id} (Zipped XHTML)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/xhtml+zip"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports/{{report_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports",
								"{{report_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/reports/{id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    }",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/reports/{{report_id}}/admissions/{{report_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"reports",
								"{{report_id}}",
								"admissions",
								"{{report_admission_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scheme Messages",
			"item": [
				{
					"name": "/schememessages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"subscription_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/schememessages",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"schememessages"
							],
							"query": [
								{
									"key": "page[size]",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "page[number]",
									"value": "first",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/schememessages/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/schememessages/{{scheme_message_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"schememessages",
								"{{scheme_message_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/schememessages/{id}/admissions/{admissions_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/notification/schememessages/{{scheme_message_id}}/admissions/{{scheme_message_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"notification",
								"schememessages",
								"{{scheme_message_id}}",
								"admissions",
								"{{scheme_message_admission_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organisation",
			"item": [
				{
					"name": "Accounts",
					"item": [
						{
							"name": "/accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"account_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"type\": \"accounts\",\n    \"attributes\": {\n       \"country\": \"GB\",\n        \"base_currency\": \"GBP\",\n        \"bank_id\": \"400302\",\n        \"bank_id_code\": \"GBDSC\",\n        \"account_number\": \"10000004\",\n        \"customer_id\": \"234\",\n        \"iban\": \"GB28NWBK40030212764204\",\n        \"bic\": \"NWBKGB42\",\n        \"account_classification\": \"Personal\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts (UK Confirmation of Payee)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"account_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{request_date}}"
									},
									{
										"key": "Digest",
										"type": "text",
										"value": "{{request_signing_digest}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"type\": \"accounts\",\n    \"attributes\": {\n       \"country\": \"GB\",\n        \"base_currency\": \"GBP\",\n        \"bank_id\": \"400302\",\n        \"bank_id_code\": \"GBDSC\",\n        \"customer_id\": \"234\",\n        \"bic\": \"NWBKGB42\",\n        \"name\": [\n            \"Samantha Holder\"\n        ],\n        \"alternative_names\": [\n            \"Sam Holder\"\n        ],\n        \"account_classification\": \"Personal\",\n        \"joint_account\": false,\n        \"account_matching_opt_out\": false,\n        \"secondary_identification\": \"A1B2C3D4\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts (LHV Virtual Account)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"account_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{request_date}}"
									},
									{
										"key": "Digest",
										"type": "text",
										"value": "{{request_signing_digest}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"type\": \"accounts\",\n    \"attributes\": {\n    \t\"country\": \"GB\",\n    \t\"base_currency\": \"GBP\",\n    \t\"name\": [\n    \t\t\"James Bond\"\n    \t],\n        \"bank_id\": \"400305\",\n        \"bank_id_code\": \"GBDSC\",\n        \"bic\": \"LHVBEE22\",\n        \"account_classification\": \"Personal\",\n        \"private_identification\": {\n            \"birth_date\": \"1920-11-11\",\n            \"birth_country\": \"GB\",\n            \"identification\": \"MI6008\",\n            \"address\": [\n                \"11 Up and Down Street\"\n            ],\n            \"country\": \"GB\",\n            \"city\": \"London\"\n        }\n    },\n    \"relationships\": {\n        \"master_account\": {\n            \"data\": [\n                {\n                    \"type\": \"accounts\",\n                    \"id\": \"{{master_account_id}}\"\n                }\n            ]\n        }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/organisation/accounts/{{account_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts",
										"{{account_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/organisation/accounts",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "1000",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[bank_id_code]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[bank_id]",
											"value": "400300",
											"disabled": true
										},
										{
											"key": "filter[account_number]",
											"value": "12345678",
											"disabled": true
										},
										{
											"key": "filter[country]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[customer_id]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[iban]",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{request_date}}"
									},
									{
										"key": "Digest",
										"type": "text",
										"value": "{{request_signing_digest}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{account_id}}\",\n    \"version\": 0,\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n       \"country\": \"GB\",\n        \"base_curr  ency\": \"GBP\",\n        \"bank_id\": \"400302\",\n        \"bank_id_code\": \"GBDSC\",\n        \"account_number\": \"10000004\",\n        \"customer_id\": \"234\",\n        \"iban\": \"GB28NWBK40030212764204\",\n        \"bic\": \"NWBKGB42\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts/{{account_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts",
										"{{account_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 204 no content\"] = responseCode.code === 204;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts/{{account_id}}?version=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts",
										"{{account_id}}"
									],
									"query": [
										{
											"key": "version",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts/{id}/events (LHV)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{request_date}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/organisation/accounts/{{account_id}}/events",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts",
										"{{account_id}}",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts/{id}/identifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"account_identification_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"type\": \"account_identifications\",\n    \"attributes\": {\n      \"secondary_identification\": \"123123123\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts/{{account_id}}/identifications",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts",
										"{{account_id}}",
										"identifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts/{id}/identifications/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{account_identification_id}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"version\": \"0\",\n    \"attributes\": {\n      \"secondary_identification\": \"401401\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts/{{account_id}}/identifications/{{account_identification_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts",
										"{{account_id}}",
										"identifications",
										"{{account_identification_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts/{id}/identifications/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 204\"] = responseCode.code === 204;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts/{{account_id}}/identifications/{{account_identification_id}}?version=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts",
										"{{account_id}}",
										"identifications",
										"{{account_identification_id}}"
									],
									"query": [
										{
											"key": "version",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts/{id}/identifications/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts/{{account_id}}/identifications/{{account_identification_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts",
										"{{account_id}}",
										"identifications",
										"{{account_identification_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accounts/{id}/identifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/accounts/{{account_id}}/identifications",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accounts",
										"{{account_id}}",
										"identifications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Requests",
					"item": [
						{
							"name": "/accountrequests (Agency)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"account_request_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{$guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"type\": \"account_requests\",\n        \"attributes\": {\n            \"country\": \"GB\",\n            \"base_currency\": \"GBP\",\n            \"bic\": \"{{account_request_bic}}\",\n            \"bank_id\": \"{{account_request_bank_id}}\",\n            \"bank_id_code\": \"GBDSC\",\n            \"name\": [\n                \"Isaac Newton\"\n            ],\n            \"private_identification\": {\n                \"birth_date\": \"1643-01-04\",\n                \"birth_country\": \"GB\",\n                \"address\": [\n                    \"20 Highstreet\"\n                ],\n                \"country\": \"GB\",\n                \"city\": \"London\",\n                \"identification\": \"PASSPORT11\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accountrequests",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountrequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accountrequests (VIBAN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"account_request_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{$guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"type\": \"account_requests\",\n        \"attributes\": {\n            \"country\": \"GB\",\n            \"base_currency\": \"GBP\",\n            \"bic\": \"{{account_request_bic}}\",\n            \"name\": [\n                \"John Doe\"\n            ],\n            \"private_identification\": {\n                \"birth_date\": \"1643-01-04\",\n                \"birth_country\": \"GB\",\n                \"address\": [\n                    \"20 Rue de Terre\"\n                ],\n                \"country\": \"FR\",\n                \"city\": \"Paris\",\n                \"identification\": \"PASSPORT11\"\n            }\n        },\n        \"relationships\": {\n            \"master_account\": {\n                \"data\": [\n                    {\n                        \"type\": \"accounts\",\n                        \"id\": \"{{master_account_id}}\"\n                    }\n                ]\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accountrequests",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountrequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accountrequests/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/organisation/accountrequests/{{account_request_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountrequests",
										"{{account_request_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accountrequests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/organisation/accountrequests",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountrequests"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "filter[country]",
											"value": "GB",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[account_number]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[bic]",
											"value": "LHVBZIG2",
											"disabled": true
										},
										{
											"key": "filter[iban]",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/accountrequests/{id}/submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"account_request_submission_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{$guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"type\": \"account_request_submissions\"\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accountrequests/{{account_request_id}}/submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountrequests",
										"{{account_request_id}}",
										"submissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accountrequests/{id}/submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"",
											"    if (json.data.attributes.status === 'delivery_confirmed') {",
											"        postman.setEnvironmentVariable(\"account_amendment_account_reference_id\", json.data.relationships.account.data[0].id);",
											"    }",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/organisation/accountrequests/{{account_request_id}}/submissions/{{account_request_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountrequests",
										"{{account_request_id}}",
										"submissions",
										"{{account_request_submission_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Account Amendments",
					"item": [
						{
							"name": "/accountamendments/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/organisation/accountamendments/{{account_amendment_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountamendments",
										"{{account_amendment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accountamendments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/organisation/accountamendments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountamendments"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "0",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "filter[country]",
											"value": "GB",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[account_number]",
											"value": "",
											"disabled": true
										},
										{
											"key": "filter[bic]",
											"value": "LHVBZIG2",
											"disabled": true
										},
										{
											"key": "filter[iban]",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/accountamendments/{id}/submissions/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/organisation/accountamendments/{{account_amendment_id}}/submissions/{{account_amendment_submission_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountamendments",
										"{{account_amendment_id}}",
										"submissions",
										"{{account_amendment_submission_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accountamendments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"account_amendment_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{$guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"type\": \"account_amendments\",\n        \"attributes\": {\n            \"name\": [\n                \"Sir Isaac Newton\"\n            ],\n            \"modify_reason\": \"Name changed\"\n        },\n        \"relationships\": {\n            \"accounts\": {\n                \"data\": {\n                    \"type\": \"accounts\",\n                    \"id\": \"{{account_amendment_account_id}}\",\n                    \"version\": 1\n                }\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accountamendments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountamendments"
									]
								}
							},
							"response": []
						},
						{
							"name": "/accountamendments/{id}/submissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"account_amendment_submission_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{$guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"type\": \"account_amendment_submissions\"\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/accountamendments/{{account_amendment_id}}/submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"accountamendments",
										"{{account_amendment_id}}",
										"submissions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Branches",
					"item": [
						{
							"name": "/branches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"branch_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"type\": \"branches\",\n    \"attributes\": {\n      \"bank_id\": \"111222\",\n      \"reference_mask\": \"################\",\n      \"validation_type\": \"card\",\n      \"acceptance_qualifier\": \"some_other_time\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches"
									]
								}
							},
							"response": []
						},
						{
							"name": "/branches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches?filter[organisation_id]={{organisation_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches"
									],
									"query": [
										{
											"key": "filter[bank_id]",
											"value": "203593",
											"disabled": true
										},
										{
											"key": "filter[organisation_id]",
											"value": "{{organisation_id}}"
										},
										{
											"key": "filter[acceptance_qualifier]",
											"value": "next_working_day",
											"disabled": true
										},
										{
											"key": "filter[validation_type]",
											"value": "card",
											"disabled": true
										},
										{
											"key": "filter[reference_mask]",
											"value": "################",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/branches/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches/{{branch_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches",
										"{{branch_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/branches/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{branch_id}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"version\": \"0\",\n    \"attributes\": {\n      \"bank_id\": \"111222\",\n      \"reference_mask\": \"4123\",\n      \"validation_type\": \"card\",\n      \"acceptance_qualifier\": \"some_other_time\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches/{{branch_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches",
										"{{branch_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/branches/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 204\"] = responseCode.code === 204;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches/{{branch_id}}?version=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches",
										"{{branch_id}}"
									],
									"query": [
										{
											"key": "version",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/branches/{id}/identifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"branch_identification_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"type\": \"branch_identifications\",\n    \"attributes\": {\n      \"secondary_identification\": \"123123123\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches/{{branch_id}}/identifications",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches",
										"{{branch_id}}",
										"identifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "/branches/{id}/identifications/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{branch_identification_id}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"version\": \"0\",\n    \"attributes\": {\n      \"secondary_identification\": \"401401\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches/{{branch_id}}/identifications/{{branch_identification_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches",
										"{{branch_id}}",
										"identifications",
										"{{branch_identification_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/branches/{id}/identifications/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 204\"] = responseCode.code === 204;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"user-agent": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches/{{branch_id}}/identifications/{{branch_identification_id}}?version=0",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches",
										"{{branch_id}}",
										"identifications",
										"{{branch_identification_id}}"
									],
									"query": [
										{
											"key": "version",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/branches/{id}/identifications/{id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches/{{branch_id}}/identifications/{{branch_identification_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches",
										"{{branch_id}}",
										"identifications",
										"{{branch_identification_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/branches/{id}/identifications",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{base_url}}/organisation/branches/{{branch_id}}/identifications",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"organisation",
										"branches",
										"{{branch_id}}",
										"identifications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/units",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"child_organisation_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n      \"name\": \"Acme Uk Limited\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/organisation/units",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"organisation",
								"units"
							]
						}
					},
					"response": []
				},
				{
					"name": "/units/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/organisation/units/{{organisation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"organisation",
								"units",
								"{{organisation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/units",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/organisation/units",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"organisation",
								"units"
							]
						}
					},
					"response": []
				},
				{
					"name": "/units/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{organisation_id}}\",\n    \"version\": 0,\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n      \"name\": \"Acme Uk Limited 2017\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/organisation/units/{{organisation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"organisation",
								"units",
								"{{organisation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/positions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/organisation/positions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"organisation",
								"positions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/balances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/organisation/balances",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"organisation",
								"balances"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Open Banking",
			"item": [
				{
					"name": "/v1/openbanking/accounts/name-verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"starling_association_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"Data\": {\n        \"AccountType\": \"Personal\",\n        \"Identification\": \"40030210000007\",\n        \"Name\": \"Joao Campeao\",\n        \"SchemeName\": \"SortCodeAccountNumber\"\n      }\n}"
						},
						"url": {
							"raw": "{{base_url}}/openbanking/accounts/name-verification",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"openbanking",
								"accounts",
								"name-verification"
							]
						}
					},
					"response": []
				},
				{
					"name": "/v1/openbanking/participants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"starling_association_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"Data\": {\n        \"AccountType\": \"Personal\",\n        \"Identification\": \"40030210000007\",\n        \"Name\": \"Joao Campeao\",\n        \"SchemeName\": \"SortCodeAccountNumber\"\n      }\n}"
						},
						"url": {
							"raw": "{{base_url}}/openbanking/participants?filter[sort_code]=040026",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"openbanking",
								"participants"
							],
							"query": [
								{
									"key": "filter[sort_code]",
									"value": "040026"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Security",
			"item": [
				{
					"name": "/role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"role_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n      \"name\" : \"Submit only role\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/security/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "/roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "/roles/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/security/roles/{{role_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/roles/{id}/aces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/roles/{{role_id}}/aces",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"roles",
								"{{role_id}}",
								"aces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/roles/{id}/aces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    postman.setEnvironmentVariable(\"ace_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n      \"role_id\": \"{{role_id}}\",\n      \"action\": \"CREATE\",\n      \"record_type\": \"Account\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/security/roles/{{role_id}}/aces",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"roles",
								"{{role_id}}",
								"aces"
							]
						}
					},
					"response": []
				},
				{
					"name": "/roles/{id}/aces/{ace_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/security/roles/{{role_id}}/aces/{{ace_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"roles",
								"{{role_id}}",
								"aces",
								"{{ace_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/roles/{id}/aces/{ace_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/roles/{{role_id}}/aces/{{ace_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"roles",
								"{{role_id}}",
								"aces",
								"{{ace_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"user_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\":{\n        \"id\" : \"{{random_guid}}\",\n        \"organisation_id\" : \"{{organisation_id}}\",\n        \"attributes\": {\n            \"email\" : \"viewer.testbank@form3.tech\",\n            \"role_ids\" : [\"{{role_id}}\"],\n            \"username\" : \"viewer.testbank\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/security/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"user_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{user_id}}\",\n    \"version\": 1,\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n      \"username\": \"viewer.testbank\",\n      \"email\": \"viewer.testbank@acme.co.nz\",\n      \"role_ids\": [\n        \"{{role_id}}\"\n      ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}?version=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "version",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/aces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/aces",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"aces"
							],
							"query": [
								{
									"key": "filter[record_type]",
									"value": "Subscription",
									"disabled": true
								},
								{
									"key": "filter[action]",
									"value": "CREATE_APPROVE",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/roles/{role_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/roles/{{role_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/roles/{role_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/roles/{{role_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"roles",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/{id}/credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    postman.setEnvironmentVariable(\"client_id\", json.data.client_id);",
									"    postman.setEnvironmentVariable(\"client_secret\", json.data.client_secret);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/credentials",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/credentials",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{id}/credentials/{client_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 204\"] = responseCode.code === 204;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/credentials/{{client_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"credentials",
								"{{client_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{user_id}/credentials/public_key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/credentials/public_key",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"credentials",
								"public_key"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{user_id}/credentials/public_key/{public_key_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/credentials/public_key/{{request_signing_public_key_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"credentials",
								"public_key",
								"{{request_signing_public_key_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{user_id}/credentials/public_key/{public_key_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/credentials/public_key/{{request_signing_public_key_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"credentials",
								"public_key",
								"{{request_signing_public_key_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{user_id}/credentials/public_key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"request_signing_public_key_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"PublicKey\",\n  \"id\": \"{{random_guid}}\",\n  \"version\": 0,\n  \"organisation_id\": \"{{organisation_id}}\",\n  \"attributes\": {\n    \"public_key\": \"-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCFENGw33yGihy92pDjZQhl0C3\\n6rPJj+CvfSC8+q28hxA161QFNUd13wuCTUcq0Qd2qsBe/2hFyc2DCJJg0h1L78+6\\nZ4UMR7EOcpfdUE9Hf3m/hs+FUR45uBJeDK1HSFHD8bHKD6kv8FPGfJTotc+2xjJw\\noYi+1hqp1fIekaxsyQIDAQAB\\n-----END PUBLIC KEY-----\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/security/users/{{user_id}}/credentials/public_key",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"security",
								"users",
								"{{user_id}}",
								"credentials",
								"public_key"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Platform",
			"item": [
				{
					"name": "/platform/security/signing_keys",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/platform/security/signing_keys",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"platform",
								"security",
								"signing_keys"
							]
						},
						"description": "Get a list of signing keys, their IDs and Public Keys"
					},
					"response": []
				},
				{
					"name": "/platform/security/signing_keys/{id}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{authorization}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/platform/security/signing_keys/{{signing_key_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"platform",
								"security",
								"signing_keys",
								"{{signing_key_id}}"
							]
						},
						"description": "Get a specific signing key using the key ID."
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "/validations/gbdsc/sortcodes/{sort_code}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/validations/gbdsc/sortcodes/{{sort_code}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"validations",
								"gbdsc",
								"sortcodes",
								"{{sort_code}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/validations/gbdsc/sortcodes/{sort_code}/accountnumbers/{account_number}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/validations/gbdsc/sortcodes/{{sort_code}}/accountnumbers/{{account_number}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"validations",
								"gbdsc",
								"sortcodes",
								"{{sort_code}}",
								"accountnumbers",
								"{{account_number}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Payment Admission Tasks",
					"item": [
						{
							"name": "/payments/{id}/admissions/{admission_id}/tasks/{task_id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['data.id is present'] = _.has(json.data, 'id');",
											"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/transaction/payments/{{payment_id}}/admissions/{{admission_id}}/tasks/{{task_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments",
										"{{payment_id}}",
										"admissions",
										"{{admission_id}}",
										"tasks",
										"{{task_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/payments/{id}/admissions/{admission_id}/tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/transaction/payments/{{payment_id}}/admissions/{{admission_id}}/tasks",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments",
										"{{payment_id}}",
										"admissions",
										"{{admission_id}}",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "/payments/{id}/admissions/{admission_id}/tasks/{task_id}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"version\": 0,\n    \"type\": \"payment_admission_tasks\",\n    \"attributes\": {\n      \"status\": \"completed\",\n      \"output\": {\n          \"outcome\": \"passed\"\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/payments/{{payment_id}}/admissions/{{admission_id}}/tasks/{{task_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments",
										"{{payment_id}}",
										"admissions",
										"{{admission_id}}",
										"tasks",
										"{{task_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/payments (Bacs)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"payment_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"type\": \"payments\",\r\n        \"id\": \"{{random_guid}}\",\r\n        \"organisation_id\": \"{{organisation_id}}\",\r\n        \"attributes\": {\r\n            \"amount\": \"600.00\",\r\n            \"beneficiary_party\": {\r\n                \"account_name\": \"Mrs Receiving Test\",\r\n                \"account_number\": \"36976638\",\r\n                \"account_number_code\": \"BBAN\",\r\n                \"account_type\": 1,\r\n                \"account_with\": {\r\n                    \"bank_id\": \"040013\",\r\n                    \"bank_id_code\": \"GBDSC\" },\r\n                \"country\": \"GB\" },\r\n            \"currency\": \"GBP\",\r\n            \"debtor_party\": {\r\n                \"account_name\": \"Mr Sending Test\",\r\n                \"account_number\": \"{{debtor_account_number}}\",\r\n                \"account_number_code\": \"BBAN\",\r\n                \"account_with\": {\r\n                    \"bank_id\": \"{{debtor_bank_id}}\",\r\n                    \"bank_id_code\": \"GBDSC\" },\r\n                \"country\": \"GB\" },\r\n            \"numeric_reference\": \"0001\",\r\n            \"processing_date\": \"{{processing_date}}\",\r\n            \"reference\": \"ref\",\r\n            \"scheme_payment_type\": \"Credit\",\r\n            \"payment_scheme\": \"BACS\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments (SEPA Instant)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"payment_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{random_guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"13.00\",\n            \"beneficiary_party\": {\n                \"account_number\": \"GB02FTHR40000124720741\",\n                \"account_number_code\": \"IBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"FTHRGBL1\",\n                    \"bank_id_code\": \"SWBIC\"\n                },\n                \"account_name\": \"Mdm Receiving Test\"\n            },\n            \"charges_information\": {\n                \"bearer_code\": \"SLEV\"\n            },\n            \"currency\": \"EUR\",\n            \"debtor_party\": {\n                \"account_number\": \"{{debtor_iban}}\",\n                \"account_number_code\": \"IBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"{{debtor_bic}}\",\n                    \"bank_id_code\": \"SWBIC\"\n                },\n                \"account_name\": \"Herr Sending Test\"\n            },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"remittance_information\": \"Remittance information\",\n            \"payment_scheme\": \"SEPAINSTANT\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments (SEPA Credit Transfer)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"payment_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{random_guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n               \"amount\": \"13.00\",\n               \"beneficiary_party\": {\n               \t   \"account_name\": \"Mdm Receiving Test\",\n                   \"account_number\": \"GB75FTHR04001373260607\",\n                   \"account_number_code\": \"IBAN\",\n                   \"account_with\": {\n                       \"bank_id\": \"FTHRGBL1\",\n                       \"bank_id_code\": \"SWBIC\"\n                   }\n               },\n               \"charges_information\": {\n                   \"bearer_code\": \"SLEV\"\n               },\n               \"currency\": \"EUR\",\n               \"debtor_party\": {\n               \t   \"account_name\": \"Herr Sending Test\",\n                   \"account_number\": \"{{debtor_iban}}\",\n                   \"account_number_code\": \"IBAN\",\n                   \"account_with\": {\n                       \"bank_id\": \"{{debtor_bic}}\",\n                       \"bank_id_code\": \"SWBIC\"\n                   }\n             },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n           \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"remittance_information\": \"Remittance information\",\n            \"payment_scheme\": \"SEPASCT\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments (FPS Direct)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"payment_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"type\": \"payments\",\r\n        \"id\": \"{{random_guid}}\",\r\n        \"organisation_id\": \"{{organisation_id}}\",\r\n        \"attributes\": {\r\n            \"amount\": \"600.00\",\r\n            \"beneficiary_party\": {\r\n                \"account_name\": \"Mrs Receiving Test\",\r\n                \"account_number\": \"71268996\",\r\n                \"account_number_code\": \"BBAN\",\r\n                \"account_type\": 1,\r\n                \"account_with\": {\r\n                    \"bank_id\": \"400302\",\r\n                    \"bank_id_code\": \"GBDSC\" },\r\n                \"country\": \"GB\" },\r\n            \"currency\": \"GBP\",\r\n            \"debtor_party\": {\r\n                \"account_name\": \"Mr Sending Test\",\r\n                \"account_number\": \"{{debtor_account_number}}\",\r\n                \"account_number_code\": \"BBAN\",\r\n                \"account_with\": {\r\n                    \"bank_id\": \"{{debtor_bank_id}}\",\r\n                    \"bank_id_code\": \"GBDSC\" },\r\n                \"country\": \"GB\" },\r\n            \"numeric_reference\": \"0001\",\r\n            \"processing_date\": \"{{processing_date}}\",\r\n            \"reference\": \"1112223330\",\r\n            \"scheme_payment_type\": \"ImmediatePayment\",\r\n            \"payment_scheme\": \"FPS\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments (FPS Indirect)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"payment_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": {\r\n        \"type\": \"payments\",\r\n        \"id\": \"{{random_guid}}\",\r\n        \"version\": 0,\r\n        \"organisation_id\": \"{{organisation_id}}\",\r\n        \"attributes\": {\r\n            \"amount\": \"1.00\",\r\n            \"beneficiary_party\": {\r\n                \"account_name\": \"Mrs Receiving Test\",\r\n                \"account_number\": \"71268996\",\r\n                \"account_number_code\": \"BBAN\",\r\n                \"account_type\": 1,\r\n                \"account_with\": {\r\n                    \"bank_id\": \"400302\",\r\n                    \"bank_id_code\": \"GBDSC\" },\r\n                \"country\": \"GB\" },\r\n            \"currency\": \"GBP\",\r\n            \"debtor_party\": {\r\n                \"account_name\": \"Mr Sending Test\",\r\n                \"account_number\": \"{{debtor_account_number}}\",\r\n                \"account_number_code\": \"BBAN\",\r\n                \"account_with\": {\r\n                    \"bank_id\": \"{{debtor_bank_id}}\",\r\n                    \"bank_id_code\": \"GBDSC\" },\r\n                \"country\": \"GB\" },\r\n            \"processing_date\": \"{{processing_date}}\",\r\n            \"reference\": \"D/1234567890123456\",\r\n            \"scheme_payment_type\": \"ImmediatePayment\",\r\n            \"payment_scheme\": \"FPS\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"payment_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"paymentsubmissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n}  "
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/submissions/{submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/submissions/{{submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"submissions",
								"{{submission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "0",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "filter[organisation_id]",
									"value": "{{organisation_id}}",
									"disabled": true
								},
								{
									"key": "filter[debtor_party.account_number]",
									"value": "12341234",
									"disabled": true
								},
								{
									"key": "filter[debtor_party.bank_id]",
									"value": "100200",
									"disabled": true
								},
								{
									"key": "filter[beneficiary_party.account_number]",
									"value": "87654321",
									"disabled": true
								},
								{
									"key": "filter[beneficiary_party.bank_id]",
									"value": "300400",
									"disabled": true
								},
								{
									"key": "filter[currency]",
									"value": "EUR",
									"disabled": true
								},
								{
									"key": "filter[scheme_transaction_id]",
									"value": "010172572449500010",
									"disabled": true
								},
								{
									"key": "filter[payment_scheme]",
									"value": "FPS",
									"disabled": true
								},
								{
									"key": "filter[payment_type]",
									"value": "Credit",
									"disabled": true
								},
								{
									"key": "filter[processing_date_from]",
									"value": "2017-09-23",
									"disabled": true
								},
								{
									"key": "filter[processing_date_to]",
									"value": "2017-09-23",
									"disabled": true
								},
								{
									"key": "filter[unique_scheme_id]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[submission.submission_date_from]",
									"value": "2018-03-01T00:00:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[submission.submission_date_to]",
									"value": "2018-02-28T11:54:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[submission.status]",
									"value": "delivery_confirmed",
									"disabled": true
								},
								{
									"key": "filter[submission.scheme_status_code]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[admission.admission_date_from]",
									"value": "2018-02-28T10:54:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[admission.admission_date_to]",
									"value": "2018-02-28T11:54:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[admission.status]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[admission.scheme_status_code]",
									"value": "0080",
									"disabled": true
								},
								{
									"key": "filter[amount]",
									"value": "123",
									"disabled": true
								},
								{
									"key": "filter[reference]",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/admissions/{{admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"admissions",
								"{{admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/returns (FPS, Bacs, SCT)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"return_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"returns\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n\t    \"amount\": \"10\",\n\t    \"currency\": \"GBP\",\n\t    \"return_code\": \"00000002\"\n\t}\n  }\n}  "
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/returns",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"returns"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/returns (SEPA DD)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"return_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							},
							{
								"key": "Digest",
								"type": "text",
								"value": "{{request_signing_digest}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{random_guid}}\",\n        \"type\": \"returns\",\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"10\",\n            \"currency\": \"EUR\",\n            \"return_code\": \"AC02\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/returns",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"returns"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/returns/{return_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/returns/{{return_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"returns",
								"{{return_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/returns/{return_id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/returns/{{return_id}}/admissions/{{return_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"returns",
								"{{return_id}}",
								"admissions",
								"{{return_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/returns/{return_id}/reversals/{reversal_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/returns/{{return_id}}/reversals/{{return_reversal_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"returns",
								"{{return_id}}",
								"reversals",
								"{{return_reversal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/returns/{return_id}/reversals/{reversal_id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/returns/{{return_id}}/reversals/{{return_reversal_id}}/admissions/{{return_reversal_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"returns",
								"{{return_id}}",
								"reversals",
								"{{return_reversal_id}}",
								"admissions",
								"{{return_reversal_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/returns/{return_id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"return_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"returnsubmissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n}  "
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/returns/{{return_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"returns",
								"{{return_id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/returns/{return_id}/submissions/{submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/returns/{{return_id}}/submissions/{{return_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"returns",
								"{{return_id}}",
								"submissions",
								"{{return_submission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/reversals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"reversal_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"reversals\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/reversals",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"reversals"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/reversals/{reversal_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/reversals/{{reversal_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"reversals",
								"{{reversal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/reversals/{reversal_id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/reversals/{{reversal_id}}/admissions/{{admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"reversals",
								"{{reversal_id}}",
								"admissions",
								"{{admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/reversals/{reversal_id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"reversal_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"reversal_submissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n} \n"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/reversals/{{reversal_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"reversals",
								"{{reversal_id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/reversals/{reversal_id}/submissions/{reversal_submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/reversals/{{reversal_id}}/submissions/{{reversal_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"reversals",
								"{{reversal_id}}",
								"submissions",
								"{{reversal_submission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"recall_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"recalls\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n    \t\"reason_code\" : \"DUPL\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"payment_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"recall_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"recall_submissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n} \n"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/submissions/{recall_submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/submissions/{{recall_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"submissions",
								"{{recall_submission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/admissions/{recall_admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/admissions/{{recall_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"admissions",
								"{{recall_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/decisions/{decision_id}/submissions/{decision_submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/decisions/{{decision_id}}/submissions/{{decision_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"decisions",
								"{{decision_id}}",
								"submissions",
								"{{decision_submission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/decisions/{decision_id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/decisions/{{decision_id}}/admissions/{{decision_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"decisions",
								"{{decision_id}}",
								"admissions",
								"{{decision_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/decisions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"decision_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"recall_decisions\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n      \"answer\": \"accepted\",\n      \"recall_amount\": {\n    \t\"currency\": \"EUR\",\n    \t\"amount\": \"400.00\"\n      },\n      \"charges_amount\": {\n    \t\"currency\": \"EUR\",\n    \t\"amount\": \"0.00\"\n      }\n    }\n  }\n} \n"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/decisions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"decisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/decisions/{decision_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/decisions/{{decision_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"decisions",
								"{{decision_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/decisions/{decision_id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"decision_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"recall_decision_submissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n} \n"
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/decisions/{{decision_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"decisions",
								"{{decision_id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/decisions/{decision_id}/submissions/{decision_submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/decisions/{{decision_id}}/submissions/{{decision_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"decisions",
								"{{decision_id}}",
								"submissions",
								"{{decision_submission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/reversals/{reversal_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/reversals/{{reversal_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"reversals",
								"{{reversal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/recalls/{recall_id}/reversals/{reversal_id}/admissions/{reversal_admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/recalls/{{recall_id}}/reversals/{{recall_reversal_id}}/admissions/{{recall_reversal_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"recalls",
								"{{recall_id}}",
								"reversals",
								"{{recall_reversal_id}}",
								"admissions",
								"{{recall_reversal_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/advices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"advice_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"payment_advices\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n    \t\"reason_code\": \"0\",\n    \t\"beneficiary_party\": {\n    \t\t\"new_bank_details\": {\n\t    \t\t\"account_number\": \"12345678\",\n\t    \t\t\"roll_number\": \"123456789123456789\",\n\t    \t\t\"account_with\": {\n\t    \t\t\t\"bank_id\": \"654321\"\n\t    \t\t}\n    \t\t}\n\t\t}\n\t}\n  }\n}  "
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/advices",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"advices"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/advices/{advice_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"advice_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/advices/{{advice_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"advices",
								"{{advice_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/advices/{advice_id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"advice_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"payment_advice_submissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n}  "
						},
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/advices/{{advice_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"advices",
								"{{advice_id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/payments/{id}/advices/{advice_id}/submissions/{advice_submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/payments/{{payment_id}}/advices/{{advice_id}}/submissions/{{advice_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"payments",
								"{{payment_id}}",
								"advices",
								"{{advice_id}}",
								"submissions",
								"{{advice_submission_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Direct Debits",
			"item": [
				{
					"name": "/directdebits (Bacs)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"direct_debit_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"direct_debits\",\n        \"id\": \"{{random_guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"13.00\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"71268996\",\n                \"account_number_code\": \"BBAN\",\n                \"account_type\": 1,\n                \"account_with\": {\n                    \"bank_id\": \"400302\",\n                    \"bank_id_code\": \"GBDSC\"\n                }\n            },\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"{{debtor_account_number}}\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"{{debtor_bank_id}}\",\n                    \"bank_id_code\": \"GBDSC\"\n                }\n            },\n            \"numeric_reference\": \"0001\",\n            \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"scheme_payment_type\": \"DirectDebitFirst\", \n            \"payment_scheme\": \"BACS\",\n            \"clearing_id\" : \"123456\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/directdebits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits (SEPA DD)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var today = new Date();",
									"var dd = today.getDate()+1;",
									"var mm = today.getMonth(); ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"direct_debit_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							},
							{
								"key": "Digest",
								"type": "text",
								"value": "{{request_signing_digest}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"direct_debits\",\n        \"id\": \"{{random_guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"1.00\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Joe Doe\",\n                \"account_number\": \"FR8512345678900001234567890\",\n                \"account_number_code\": \"IBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"SDDDATG0\",\n                    \"bank_id_code\": \"SWBIC\"\n                },\n                \"address\": [\n                    \"123 Rue de la Madelaine\",\n                    \"69007 Lyon\"\n                ],\n                \"country\": \"FR\",\n                \"name\": \"Jonathan Doe\",\n                \"private_identification\": {\n                    \"identification\": \" It59ZzZ 0000096897870158 \"\n                }\n            },\n            \"ultimate_beneficiary\": {\n                \"name\": \"Jane Doe\",\n                \"address\": [\n                    \"123 Rue de la Madelaine\",\n                    \"69007 Lyon\"\n                ],\n                \"country\": \"FR\",\n                \"private_identification\": {\n                    \"identification\": \"HJ8756\",\n                    \"identification_scheme_code\": \"CCPT\",\n                    \"identification_issuer\": \"HM Passport Office\"\n                }\n            },\n            \"currency\": \"EUR\",\n            \"debtor_party\": {\n                \"account_name\": \"Augusta Ada King, Countess of Lovelace\",\n                \"account_number\": \"FR7618206000103056966400117\",\n                \"account_number_code\": \"IBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"SDDDITA1\",\n                    \"bank_id_code\": \"SWBIC\"\n                },\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth\",\n                    \"Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\",\n                \"name\": \"Ada Lovelace\"\n            },\n            \"ultimate_debtor\": {\n                \"name\": \"Ada Lovelace\",\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth\",\n                    \"Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\",\n                \"private_identification\": {\n                    \"identification\": \"DR74653\",\n                    \"identification_scheme\": \"ULTIMATE_BANK\",\n                    \"identification_issuer\": \"HM Passport Office\"\n                }\n            },\n            \"instruction_id\": \"CIAO1\",\n            \"end_to_end_reference\": \"REF-12-43452\",\n            \"processing_date\": \"2021-07-25\",\n            \"scheme_payment_type\": \"DirectDebitFirst\",\n            \"payment_scheme\": \"SEPADDCORE\",\n            \"reference\": \"EBA Clearing - MANDAT001\",\n            \"scheme_transaction_id\": \"395536T41P312\",\n            \"mandate_signature_date\": \"2020-09-20\",\n            \"mandate_amendment_indicator\": false,\n            \"category_purpose_coded\": \"CORT\",\n            \"structured_reference\": {\n                \"reference\": \"38463757034\",\n                \"issuer\": \"Some Company\"\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/directdebits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"direct_debit_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "0",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "filter[organisation_id]",
									"value": "{{organisation_id}}",
									"disabled": true
								},
								{
									"key": "filter[debtor_party.account_number]",
									"value": "12341234",
									"disabled": true
								},
								{
									"key": "filter[debtor_party.bank_id]",
									"value": "100200",
									"disabled": true
								},
								{
									"key": "filter[beneficiary_party.account_number]",
									"value": "87654321",
									"disabled": true
								},
								{
									"key": "filter[beneficiary_party.bank_id]",
									"value": "300400",
									"disabled": true
								},
								{
									"key": "filter[currency]",
									"value": "EUR",
									"disabled": true
								},
								{
									"key": "filter[scheme_transaction_id]",
									"value": "010172572449500010",
									"disabled": true
								},
								{
									"key": "filter[payment_scheme]",
									"value": "FPS",
									"disabled": true
								},
								{
									"key": "filter[payment_type]",
									"value": "Credit",
									"disabled": true
								},
								{
									"key": "filter[processing_date_from]",
									"value": "2017-09-23",
									"disabled": true
								},
								{
									"key": "filter[processing_date_to]",
									"value": "2017-09-23",
									"disabled": true
								},
								{
									"key": "filter[unique_scheme_id]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[submission.submission_date_from]",
									"value": "2018-03-01T00:00:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[submission.submission_date_to]",
									"value": "2018-02-28T11:54:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[admission.admission_date_from]",
									"value": "2018-02-28T10:54:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[admission.admission_date_to]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[scheme_status_code]",
									"value": "delivery_failed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/admissions/{{direct_debit_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"admissions",
								"{{direct_debit_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"direct_debit_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"direct_debit_submissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n} \n"
						},
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/submissions/{submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/submissions/{{direct_debit_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"submissions",
								"{{direct_debit_submission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/reversals/{reversal_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/reversals/{{direct_debit_reversal_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"reversals",
								"{{direct_debit_reversal_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/reversals/{reversal_id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/reversals/{{reversal_id}}/admissions/{{direct_debit_reversal_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"reversals",
								"{{reversal_id}}",
								"admissions",
								"{{direct_debit_reversal_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/returns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"direct_debit_return_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"direct_debit_returns\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n    \t\"return_code\": \"0\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/returns",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"returns"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/returns/{return_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/returns/{{direct_debit_return_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"returns",
								"{{direct_debit_return_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/returns/{return_id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/returns/{{direct_debit_return_id}}/admissions/{{direct_debit_return_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"returns",
								"{{direct_debit_return_id}}",
								"admissions",
								"{{direct_debit_return_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/returns/{return_id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"direct_debit_return_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"direct_debit_return_submissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n} \n"
						},
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/returns/{{direct_debit_return_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"returns",
								"{{direct_debit_return_id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/returns/{return_id}/submissions/{submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/returns/{{direct_debit_return_id}}/submissions/{{direct_debit_return_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"returns",
								"{{direct_debit_return_id}}",
								"submissions",
								"{{direct_debit_return_submission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/decisions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"direct_debit_decision_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"direct_debit_decisions\",\n    \"organisation_id\": \"{{organisation_id}}\",\n    \"attributes\": {\n    \t\"answer\": \"rejected\",\n        \"reason_code\": \"AC01\",\n        \"reason\": \"Incorrect account number\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/decisions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"decisions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/decisions/{decision_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/decisions/{{direct_debit_decision_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"decisions",
								"{{direct_debit_decision_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/decisions/{decision_id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"direct_debit_decision_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"direct_debit_decision_submissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n} \n"
						},
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/e9d310e8-4555-4cf4-9a07-8c68e8e1edbc/decisions/ba848e2e-2fd0-4d36-b243-09a016b3744e/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"e9d310e8-4555-4cf4-9a07-8c68e8e1edbc",
								"decisions",
								"ba848e2e-2fd0-4d36-b243-09a016b3744e",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/directdebits/{id}/decisions/{decision_id}/submissions/{submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/directdebits/{{direct_debit_id}}/decisions/{{direct_debit_decision_id}}/submissions/{{direct_debit_decision_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"directdebits",
								"{{direct_debit_id}}",
								"decisions",
								"{{direct_debit_decision_id}}",
								"submissions",
								"{{direct_debit_decision_submission_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mandates",
			"item": [
				{
					"name": "Reinstate Mandate (Bacs Mandate Management)",
					"item": [
						{
							"name": "/mandates/{id} Reinstate Mandate (Bacs Mandate Management)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\":{\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"id\": \"{{mandate_id}}\",\n        \"version\": 0,\n        \"attributes\": {\n            \"scheme_payment_type\": \"DirectDebitInstructionAmend\"\n        }\n\t}\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"mandates",
										"{{mandate_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/mandates/{id}/submissions Reinstate Mandate (Bacs Mandate Management)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"mandate_submission_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t    \"id\": \"{{random_guid}}\",\n\t    \"type\": \"mandate_submissions\",\n\t    \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"submission_reason\": \"R\"\n        }\n\t}\t    \n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}/submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"mandates",
										"{{mandate_id}}",
										"submissions"
									]
								},
								"description": "Mandate Return creation endpoint"
							},
							"response": []
						}
					]
				},
				{
					"name": "Cancel Mandate (Bacs)",
					"item": [
						{
							"name": "/mandates/{id} (Bacs DDI Cancellation)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\":{\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"id\": \"{{mandate_id}}\",\n        \"version\": 0,\n        \"attributes\": {\n            \"scheme_payment_type\": \"DirectDebitInstructionCancel\"\n        }\n\t}\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"mandates",
										"{{mandate_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "/mandates/{id}/submissions (Bacs DDI Cancellation)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"response code is 201\"] = responseCode.code === 201;",
											"",
											"",
											"try { ",
											"    var json = JSON.parse(responseBody);",
											"    tests['response is valid JSON'] = true;",
											"    tests['id is present'] = _.has(json.data, 'id');",
											"    ",
											"    postman.setEnvironmentVariable(\"mandate_submission_id\", json.data.id);",
											"}",
											"catch (e) { ",
											"    tests['error: ' + e] = false;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Date",
										"value": "{{request_date}}",
										"type": "text"
									},
									{
										"key": "Digest",
										"value": "{{request_signing_digest}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t    \"id\": \"{{random_guid}}\",\n\t    \"type\": \"mandate_submissions\",\n\t    \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"submission_reason\": \"1\"\n        }\n\t}\t    \n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}/submissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"mandates",
										"{{mandate_id}}",
										"submissions"
									]
								},
								"description": "Mandate Return creation endpoint"
							},
							"response": []
						}
					]
				},
				{
					"name": "/mandates/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"mandate_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates",
								"{{mandate_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/mandates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/mandates",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "0",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "1000",
									"disabled": true
								},
								{
									"key": "filter[organisation_id]",
									"value": "{{organisation_id}}",
									"disabled": true
								},
								{
									"key": "filter[debtor_party.account_number]",
									"value": "12341234",
									"disabled": true
								},
								{
									"key": "filter[debtor_party.bank_id]",
									"value": "100200",
									"disabled": true
								},
								{
									"key": "filter[beneficiary_party.account_number]",
									"value": "87654321",
									"disabled": true
								},
								{
									"key": "filter[beneficiary_party.bank_id]",
									"value": "300400",
									"disabled": true
								},
								{
									"key": "filter[currency]",
									"value": "EUR",
									"disabled": true
								},
								{
									"key": "filter[processing_date_from]",
									"value": "2020-05-27",
									"disabled": true
								},
								{
									"key": "filter[processing_date_to]",
									"value": "2017-09-23",
									"disabled": true
								},
								{
									"key": "filter[submission.submission_date_from]",
									"value": "2018-03-01T00:00:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[submission.submission_date_to]",
									"value": "2018-02-28T11:54:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[admission.admission_date_from]",
									"value": "2018-02-28T10:54:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[admission.admission_date_to]",
									"value": "2018-02-28T11:54:09.357Z",
									"disabled": true
								},
								{
									"key": "filter[reference]",
									"value": "The mandate reference",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/mandates/{id}/admissions/{admission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}/admissions/{{mandate_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates",
								"{{mandate_id}}",
								"admissions",
								"{{mandate_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/mandates (Bacs)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"mandate_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":{\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"id\": \"{{random_guid}}\",\n        \"attributes\": {\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"39927360\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"400302\",\n                    \"bank_id_code\": \"GBDSC\"\n                }\n            },\n            \"clearing_id\": \"123456\",\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"{{debtor_account_number}}\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"{{debtor_bank_id}}\",\n                    \"bank_id_code\": \"GBDSC\"\n                }\n            },\n            \"payment_scheme\": \"BACS\",\n            \"reference\": \"D/1234567890123456\",\n            \"scheme_payment_type\": \"DirectDebitInstructionNew\"\n        }\n\t}\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/mandates",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates"
							]
						}
					},
					"response": []
				},
				{
					"name": "/mandates (SEPA DD)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"mandate_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							},
							{
								"key": "Digest",
								"type": "text",
								"value": "{{request_signing_digest}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{random_guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"type\": \"mandates\",\n        \"attributes\": {\n            \"beneficiary_party\": {\n                \"account_name\": \"Jonathan Doe\"\n            },\n            \"debtor_party\": {\n                \"account_number\": \"FR7618206000103056966400117\",\n                \"account_number_code\": \"IBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"SDDDITA1\",\n                    \"bank_id_code\": \"SWBIC\"\n                }\n            },\n            \"reference\": \"EBA Clearing - MANDAT001\",\n            \"clearing_id\": \"It59ZzZ 0000096897870158\",\n            \"payment_scheme\": \"SEPADDCORE\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/mandates",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates"
							]
						}
					},
					"response": []
				},
				{
					"name": "/mandates/{id} (Bacs)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":{\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"id\": \"{{mandate_id}}\",\n        \"version\": 0,\n        \"attributes\": {\n            \"debtor_party\": {\n                \"account_name\": \"Mr New Sending Test\",\n                \"account_number\": \"12345678\"\n            }\n        }\n\t}\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates",
								"{{mandate_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/mandates/{id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"mandate_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\": {\n\t    \"id\": \"{{random_guid}}\",\n\t    \"type\": \"mandate_submissions\",\n\t    \"organisation_id\": \"{{organisation_id}}\"\n\t}\t    \n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates",
								"{{mandate_id}}",
								"submissions"
							]
						},
						"description": "Mandate Return creation endpoint"
					},
					"response": []
				},
				{
					"name": "/mandates/{id}/submissions/{submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"mandate_return_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}/submissions/{{mandate_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates",
								"{{mandate_id}}",
								"submissions",
								"{{mandate_submission_id}}"
							]
						},
						"description": "Mandate Return creation endpoint"
					},
					"response": []
				},
				{
					"name": "/mandates/{id}/returns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"mandate_return_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"id\": \"{{random_guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"type\": \"mandate_returns\",\n        \"attributes\": {\n        \t\"return_code\": \"1\"\n        }\n    }\n}\n\n"
						},
						"url": {
							"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}/returns",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates",
								"{{mandate_id}}",
								"returns"
							]
						},
						"description": "Mandate Return creation endpoint"
					},
					"response": []
				},
				{
					"name": "/mandate/{id}/returns/{return_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}/returns/{{mandate_return_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates",
								"{{mandate_id}}",
								"returns",
								"{{mandate_return_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/mandates/{id}/returns{return_id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"mandate_return_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"id\": \"{{random_guid}}\",\n    \"type\": \"mandate_return_submissions\",\n    \"organisation_id\": \"{{organisation_id}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}/returns/{{mandate_return_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates",
								"{{mandate_id}}",
								"returns",
								"{{mandate_return_id}}",
								"submissions"
							]
						},
						"description": "Mandate Return creation endpoint"
					},
					"response": []
				},
				{
					"name": "/mandates/{id}/returns{return_id}/submissions/{submission_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['id is present'] = _.has(json.data, 'id');",
									"    ",
									"    postman.setEnvironmentVariable(\"mandate_return_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/mandates/{{mandate_id}}/returns/{{mandate_return_id}}/submissions/{{mandate_return_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"mandates",
								"{{mandate_id}}",
								"returns",
								"{{mandate_return_id}}",
								"submissions",
								"{{mandate_return_submission_id}}"
							]
						},
						"description": "Mandate Return creation endpoint"
					},
					"response": []
				}
			]
		},
		{
			"name": "Claims",
			"item": [
				{
					"name": "/claims",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/claims?page[number]=last&page[size]=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"claims"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "last"
								},
								{
									"key": "page[size]",
									"value": "1"
								},
								{
									"key": "filter[organisation_id]",
									"value": "{{organisation_id}}",
									"disabled": true
								},
								{
									"key": "filter[debtor_party.account_number]",
									"value": "12341234",
									"disabled": true
								},
								{
									"key": "filter[debtor_party.bank_id]",
									"value": "100200",
									"disabled": true
								},
								{
									"key": "filter[beneficiary_party.account_number]",
									"value": "87654321",
									"disabled": true
								},
								{
									"key": "filter[beneficiary_party.bank_id]",
									"value": "300400",
									"disabled": true
								},
								{
									"key": "filter[payment_scheme]",
									"value": "Bacs",
									"disabled": true
								},
								{
									"key": "filter[clearing_id]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[reference]\t",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[reason_code]",
									"value": "1",
									"disabled": true
								},
								{
									"key": "filter[contact_name]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[original_instruction.reference]",
									"value": "",
									"disabled": true
								},
								{
									"key": "filter[submission.status]\t",
									"value": "queued_for_delivery",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/claims",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateNumber() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 100000000000000000).toString();",
									"  }",
									"  return s4();",
									"}",
									"",
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									"postman.setEnvironmentVariable(\"scheme_transaction_id\", generateNumber());",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"claim_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"claims\",\n        \"id\": \"{{random_guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"payment_scheme\": \"Bacs\",\n            \"reason_code\": \"1\",\n            \"contact_name\": \"Mr. Claim Contact\",\n            \"reference\": \"DDIC123456-789\",\n            \"clearing_id\": \"123123\",\n            \"beneficiary_party\": {\n                \"account_number\": \"{{debtor_account_number}}\",\n                \"bank_id\": \"{{debtor_bank_id}}\"\n            },\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"87654321\",\n                \"bank_id\": \"333333\"\n            },\n            \"original_instruction\": {\n                \"clearing_id\": \"654321\",\n                \"reference\": \"AB/123456\"\n            },\n            \"number_of_claims\": 1,\n            \"disputed_transactions\": [\n                {\n                    \"date\": \"2019-03-12\",\n                    \"amount\": \"700.00\"\n                }\n            ]\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/claims",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"claims"
							]
						}
					},
					"response": [
						{
							"name": "/payments",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{$guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"231\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_type\": 1,\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"2 Alexandra Crescent, Ilkley LS29 9ER\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n            \"payment_purpose\": \"001\",\n            \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"regulatory_reporting\": \"May be required for some foreign originated payments\",\n            \"remittance_information\": \"Remittance information - Additional remittance information over and above reference information\",\n            \"scheme_payment_type\": \"ImmediatePayment\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/payments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 18 Sep 2018 14:12:54 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "kong/0.10.3",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "3",
									"name": "X-Kong-Proxy-Latency",
									"description": "Custom header"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "54",
									"name": "X-Kong-Upstream-Latency",
									"description": "Custom header"
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "l5d-success-class",
									"value": "1.0",
									"name": "l5d-success-class",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"payments\",\"id\":\"7cf2eab8-8cdf-4bef-9c82-08dd379175b9\",\"version\":0,\"organisation_id\":\"bfa6b185-a6fa-8095-06ba-4a82ab4203d0\",\"attributes\":{\"amount\":\"231\",\"beneficiary_party\":{\"account_name\":\"Mrs Receiving Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_type\":1,\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"],\"country\":\"GB\"},\"currency\":\"GBP\",\"debtor_party\":{\"account_name\":\"Mr Sending Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"2 Alexandra Crescent, Ilkley LS29 9ER\"],\"country\":\"GB\"},\"end_to_end_reference\":\"00151519632ZCBBBJQ\",\"numeric_reference\":\"0001\",\"scheme_transaction_id\":\"167224449400460220\",\"payment_purpose\":\"001\",\"payment_scheme\":\"FPS\",\"processing_date\":\"2018-09-18\",\"reference\":\"D/1234567890123456\",\"regulatory_reporting\":\"May be required for some foreign originated payments\",\"remittance_information\":\"Remittance information - Additional remittance information over and above reference information\",\"scheme_payment_type\":\"ImmediatePayment\"},\"relationships\":{\"payment_submission\":{\"data\":[]},\"payment_return\":{\"data\":[]},\"payment_admission\":{\"data\":[]},\"payment_reversal\":{\"data\":[]}}},\"links\":{\"self\":\"/v1/transaction/payments\",\"first\":\"/v1/transaction/payments?page[number]=first\",\"last\":\"/v1/transaction/payments?page[number]=last\"}}"
						}
					]
				},
				{
					"name": "/claims/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateNumber() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 100000000000000000).toString();",
									"  }",
									"  return s4();",
									"}",
									"",
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									"postman.setEnvironmentVariable(\"scheme_transaction_id\", generateNumber());",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.attributes.beneficiary_party is populated'] = _.has(json.data.attributes, 'beneficiary_party')",
									"    tests['data.attributes.beneficiary_party.account_with is populated'] = _.has(json.data.attributes.beneficiary_party, 'account_with')",
									"    tests['data.attributes.beneficiary_party.account_with.bank_id_code is populated'] = _.has(json.data.attributes.beneficiary_party.account_with, 'bank_id_code')",
									"    postman.setEnvironmentVariable(\"claim_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/claims/{{claim_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"claims",
								"{{claim_id}}"
							]
						}
					},
					"response": [
						{
							"name": "/payments",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{$guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"231\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_type\": 1,\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"2 Alexandra Crescent, Ilkley LS29 9ER\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n            \"payment_purpose\": \"001\",\n            \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"regulatory_reporting\": \"May be required for some foreign originated payments\",\n            \"remittance_information\": \"Remittance information - Additional remittance information over and above reference information\",\n            \"scheme_payment_type\": \"ImmediatePayment\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/payments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 18 Sep 2018 14:12:54 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "kong/0.10.3",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "3",
									"name": "X-Kong-Proxy-Latency",
									"description": "Custom header"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "54",
									"name": "X-Kong-Upstream-Latency",
									"description": "Custom header"
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "l5d-success-class",
									"value": "1.0",
									"name": "l5d-success-class",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"payments\",\"id\":\"7cf2eab8-8cdf-4bef-9c82-08dd379175b9\",\"version\":0,\"organisation_id\":\"bfa6b185-a6fa-8095-06ba-4a82ab4203d0\",\"attributes\":{\"amount\":\"231\",\"beneficiary_party\":{\"account_name\":\"Mrs Receiving Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_type\":1,\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"],\"country\":\"GB\"},\"currency\":\"GBP\",\"debtor_party\":{\"account_name\":\"Mr Sending Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"2 Alexandra Crescent, Ilkley LS29 9ER\"],\"country\":\"GB\"},\"end_to_end_reference\":\"00151519632ZCBBBJQ\",\"numeric_reference\":\"0001\",\"scheme_transaction_id\":\"167224449400460220\",\"payment_purpose\":\"001\",\"payment_scheme\":\"FPS\",\"processing_date\":\"2018-09-18\",\"reference\":\"D/1234567890123456\",\"regulatory_reporting\":\"May be required for some foreign originated payments\",\"remittance_information\":\"Remittance information - Additional remittance information over and above reference information\",\"scheme_payment_type\":\"ImmediatePayment\"},\"relationships\":{\"payment_submission\":{\"data\":[]},\"payment_return\":{\"data\":[]},\"payment_admission\":{\"data\":[]},\"payment_reversal\":{\"data\":[]}}},\"links\":{\"self\":\"/v1/transaction/payments\",\"first\":\"/v1/transaction/payments?page[number]=first\",\"last\":\"/v1/transaction/payments?page[number]=last\"}}"
						}
					]
				},
				{
					"name": "/claims/{id}/submissions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateNumber() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 100000000000000000).toString();",
									"  }",
									"  return s4();",
									"}",
									"",
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									"postman.setEnvironmentVariable(\"scheme_transaction_id\", generateNumber());",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    postman.setEnvironmentVariable(\"claim_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"claim_submissions\",\n        \"id\": \"{{random_guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/claims/{{claim_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"claims",
								"{{claim_id}}",
								"submissions"
							]
						}
					},
					"response": [
						{
							"name": "/payments",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{$guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"231\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_type\": 1,\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"2 Alexandra Crescent, Ilkley LS29 9ER\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n            \"payment_purpose\": \"001\",\n            \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"regulatory_reporting\": \"May be required for some foreign originated payments\",\n            \"remittance_information\": \"Remittance information - Additional remittance information over and above reference information\",\n            \"scheme_payment_type\": \"ImmediatePayment\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/payments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 18 Sep 2018 14:12:54 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "kong/0.10.3",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "3",
									"name": "X-Kong-Proxy-Latency",
									"description": "Custom header"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "54",
									"name": "X-Kong-Upstream-Latency",
									"description": "Custom header"
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "l5d-success-class",
									"value": "1.0",
									"name": "l5d-success-class",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"payments\",\"id\":\"7cf2eab8-8cdf-4bef-9c82-08dd379175b9\",\"version\":0,\"organisation_id\":\"bfa6b185-a6fa-8095-06ba-4a82ab4203d0\",\"attributes\":{\"amount\":\"231\",\"beneficiary_party\":{\"account_name\":\"Mrs Receiving Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_type\":1,\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"],\"country\":\"GB\"},\"currency\":\"GBP\",\"debtor_party\":{\"account_name\":\"Mr Sending Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"2 Alexandra Crescent, Ilkley LS29 9ER\"],\"country\":\"GB\"},\"end_to_end_reference\":\"00151519632ZCBBBJQ\",\"numeric_reference\":\"0001\",\"scheme_transaction_id\":\"167224449400460220\",\"payment_purpose\":\"001\",\"payment_scheme\":\"FPS\",\"processing_date\":\"2018-09-18\",\"reference\":\"D/1234567890123456\",\"regulatory_reporting\":\"May be required for some foreign originated payments\",\"remittance_information\":\"Remittance information - Additional remittance information over and above reference information\",\"scheme_payment_type\":\"ImmediatePayment\"},\"relationships\":{\"payment_submission\":{\"data\":[]},\"payment_return\":{\"data\":[]},\"payment_admission\":{\"data\":[]},\"payment_reversal\":{\"data\":[]}}},\"links\":{\"self\":\"/v1/transaction/payments\",\"first\":\"/v1/transaction/payments?page[number]=first\",\"last\":\"/v1/transaction/payments?page[number]=last\"}}"
						}
					]
				},
				{
					"name": "/claims/{id}/submissions/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateNumber() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 100000000000000000).toString();",
									"  }",
									"  return s4();",
									"}",
									"",
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									"postman.setEnvironmentVariable(\"scheme_transaction_id\", generateNumber());",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/claims/{{claim_id}}}/submissions/{{claim_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"claims",
								"{{claim_id}}}",
								"submissions",
								"{{claim_submission_id}}"
							]
						}
					},
					"response": [
						{
							"name": "/payments",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{$guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"231\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_type\": 1,\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"2 Alexandra Crescent, Ilkley LS29 9ER\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n            \"payment_purpose\": \"001\",\n            \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"regulatory_reporting\": \"May be required for some foreign originated payments\",\n            \"remittance_information\": \"Remittance information - Additional remittance information over and above reference information\",\n            \"scheme_payment_type\": \"ImmediatePayment\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/payments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 18 Sep 2018 14:12:54 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "kong/0.10.3",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "3",
									"name": "X-Kong-Proxy-Latency",
									"description": "Custom header"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "54",
									"name": "X-Kong-Upstream-Latency",
									"description": "Custom header"
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "l5d-success-class",
									"value": "1.0",
									"name": "l5d-success-class",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"payments\",\"id\":\"7cf2eab8-8cdf-4bef-9c82-08dd379175b9\",\"version\":0,\"organisation_id\":\"bfa6b185-a6fa-8095-06ba-4a82ab4203d0\",\"attributes\":{\"amount\":\"231\",\"beneficiary_party\":{\"account_name\":\"Mrs Receiving Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_type\":1,\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"],\"country\":\"GB\"},\"currency\":\"GBP\",\"debtor_party\":{\"account_name\":\"Mr Sending Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"2 Alexandra Crescent, Ilkley LS29 9ER\"],\"country\":\"GB\"},\"end_to_end_reference\":\"00151519632ZCBBBJQ\",\"numeric_reference\":\"0001\",\"scheme_transaction_id\":\"167224449400460220\",\"payment_purpose\":\"001\",\"payment_scheme\":\"FPS\",\"processing_date\":\"2018-09-18\",\"reference\":\"D/1234567890123456\",\"regulatory_reporting\":\"May be required for some foreign originated payments\",\"remittance_information\":\"Remittance information - Additional remittance information over and above reference information\",\"scheme_payment_type\":\"ImmediatePayment\"},\"relationships\":{\"payment_submission\":{\"data\":[]},\"payment_return\":{\"data\":[]},\"payment_admission\":{\"data\":[]},\"payment_reversal\":{\"data\":[]}}},\"links\":{\"self\":\"/v1/transaction/payments\",\"first\":\"/v1/transaction/payments?page[number]=first\",\"last\":\"/v1/transaction/payments?page[number]=last\"}}"
						}
					]
				},
				{
					"name": "/claims/{id}/reversals",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateNumber() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 100000000000000000).toString();",
									"  }",
									"  return s4();",
									"}",
									"",
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									"postman.setEnvironmentVariable(\"scheme_transaction_id\", generateNumber());",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    postman.setEnvironmentVariable(\"claim_reversal_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"claim_reversals\",\n        \"id\": \"{{random_guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n        \t\"original_instruction_id\": \"1234\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/claims/{{claim_id}}/reversals",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"claims",
								"{{claim_id}}",
								"reversals"
							]
						}
					},
					"response": [
						{
							"name": "/payments",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{$guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"231\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_type\": 1,\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"2 Alexandra Crescent, Ilkley LS29 9ER\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n            \"payment_purpose\": \"001\",\n            \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"regulatory_reporting\": \"May be required for some foreign originated payments\",\n            \"remittance_information\": \"Remittance information - Additional remittance information over and above reference information\",\n            \"scheme_payment_type\": \"ImmediatePayment\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/payments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 18 Sep 2018 14:12:54 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "kong/0.10.3",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "3",
									"name": "X-Kong-Proxy-Latency",
									"description": "Custom header"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "54",
									"name": "X-Kong-Upstream-Latency",
									"description": "Custom header"
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "l5d-success-class",
									"value": "1.0",
									"name": "l5d-success-class",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"payments\",\"id\":\"7cf2eab8-8cdf-4bef-9c82-08dd379175b9\",\"version\":0,\"organisation_id\":\"bfa6b185-a6fa-8095-06ba-4a82ab4203d0\",\"attributes\":{\"amount\":\"231\",\"beneficiary_party\":{\"account_name\":\"Mrs Receiving Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_type\":1,\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"],\"country\":\"GB\"},\"currency\":\"GBP\",\"debtor_party\":{\"account_name\":\"Mr Sending Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"2 Alexandra Crescent, Ilkley LS29 9ER\"],\"country\":\"GB\"},\"end_to_end_reference\":\"00151519632ZCBBBJQ\",\"numeric_reference\":\"0001\",\"scheme_transaction_id\":\"167224449400460220\",\"payment_purpose\":\"001\",\"payment_scheme\":\"FPS\",\"processing_date\":\"2018-09-18\",\"reference\":\"D/1234567890123456\",\"regulatory_reporting\":\"May be required for some foreign originated payments\",\"remittance_information\":\"Remittance information - Additional remittance information over and above reference information\",\"scheme_payment_type\":\"ImmediatePayment\"},\"relationships\":{\"payment_submission\":{\"data\":[]},\"payment_return\":{\"data\":[]},\"payment_admission\":{\"data\":[]},\"payment_reversal\":{\"data\":[]}}},\"links\":{\"self\":\"/v1/transaction/payments\",\"first\":\"/v1/transaction/payments?page[number]=first\",\"last\":\"/v1/transaction/payments?page[number]=last\"}}"
						}
					]
				},
				{
					"name": "/claims/{id}/reversals/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateNumber() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 100000000000000000).toString();",
									"  }",
									"  return s4();",
									"}",
									"",
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									"postman.setEnvironmentVariable(\"scheme_transaction_id\", generateNumber());",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/claims/{{claim_id}}}/reversals/{{claim_reversal_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"claims",
								"{{claim_id}}}",
								"reversals",
								"{{claim_reversal_id}}"
							]
						}
					},
					"response": [
						{
							"name": "/payments",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{$guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"231\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_type\": 1,\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"2 Alexandra Crescent, Ilkley LS29 9ER\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n            \"payment_purpose\": \"001\",\n            \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"regulatory_reporting\": \"May be required for some foreign originated payments\",\n            \"remittance_information\": \"Remittance information - Additional remittance information over and above reference information\",\n            \"scheme_payment_type\": \"ImmediatePayment\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/payments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 18 Sep 2018 14:12:54 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "kong/0.10.3",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "3",
									"name": "X-Kong-Proxy-Latency",
									"description": "Custom header"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "54",
									"name": "X-Kong-Upstream-Latency",
									"description": "Custom header"
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "l5d-success-class",
									"value": "1.0",
									"name": "l5d-success-class",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"payments\",\"id\":\"7cf2eab8-8cdf-4bef-9c82-08dd379175b9\",\"version\":0,\"organisation_id\":\"bfa6b185-a6fa-8095-06ba-4a82ab4203d0\",\"attributes\":{\"amount\":\"231\",\"beneficiary_party\":{\"account_name\":\"Mrs Receiving Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_type\":1,\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"],\"country\":\"GB\"},\"currency\":\"GBP\",\"debtor_party\":{\"account_name\":\"Mr Sending Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"2 Alexandra Crescent, Ilkley LS29 9ER\"],\"country\":\"GB\"},\"end_to_end_reference\":\"00151519632ZCBBBJQ\",\"numeric_reference\":\"0001\",\"scheme_transaction_id\":\"167224449400460220\",\"payment_purpose\":\"001\",\"payment_scheme\":\"FPS\",\"processing_date\":\"2018-09-18\",\"reference\":\"D/1234567890123456\",\"regulatory_reporting\":\"May be required for some foreign originated payments\",\"remittance_information\":\"Remittance information - Additional remittance information over and above reference information\",\"scheme_payment_type\":\"ImmediatePayment\"},\"relationships\":{\"payment_submission\":{\"data\":[]},\"payment_return\":{\"data\":[]},\"payment_admission\":{\"data\":[]},\"payment_reversal\":{\"data\":[]}}},\"links\":{\"self\":\"/v1/transaction/payments\",\"first\":\"/v1/transaction/payments?page[number]=first\",\"last\":\"/v1/transaction/payments?page[number]=last\"}}"
						}
					]
				},
				{
					"name": "/claims/{id}/reversals/{id}/submissions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateNumber() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 100000000000000000).toString();",
									"  }",
									"  return s4();",
									"}",
									"",
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									"postman.setEnvironmentVariable(\"scheme_transaction_id\", generateNumber());",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    postman.setEnvironmentVariable(\"claim_reversal_submission_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"claim_reversal_submissions\",\n        \"id\": \"{{random_guid}}\",\n        \"organisation_id\": \"{{organisation_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/transaction/claims/{{claim_id}}/reversals/{{claim_reversal_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"claims",
								"{{claim_id}}",
								"reversals",
								"{{claim_reversal_id}}",
								"submissions"
							]
						}
					},
					"response": [
						{
							"name": "/payments",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{$guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"231\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_type\": 1,\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"2 Alexandra Crescent, Ilkley LS29 9ER\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n            \"payment_purpose\": \"001\",\n            \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"regulatory_reporting\": \"May be required for some foreign originated payments\",\n            \"remittance_information\": \"Remittance information - Additional remittance information over and above reference information\",\n            \"scheme_payment_type\": \"ImmediatePayment\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/payments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 18 Sep 2018 14:12:54 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "kong/0.10.3",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "3",
									"name": "X-Kong-Proxy-Latency",
									"description": "Custom header"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "54",
									"name": "X-Kong-Upstream-Latency",
									"description": "Custom header"
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "l5d-success-class",
									"value": "1.0",
									"name": "l5d-success-class",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"payments\",\"id\":\"7cf2eab8-8cdf-4bef-9c82-08dd379175b9\",\"version\":0,\"organisation_id\":\"bfa6b185-a6fa-8095-06ba-4a82ab4203d0\",\"attributes\":{\"amount\":\"231\",\"beneficiary_party\":{\"account_name\":\"Mrs Receiving Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_type\":1,\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"],\"country\":\"GB\"},\"currency\":\"GBP\",\"debtor_party\":{\"account_name\":\"Mr Sending Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"2 Alexandra Crescent, Ilkley LS29 9ER\"],\"country\":\"GB\"},\"end_to_end_reference\":\"00151519632ZCBBBJQ\",\"numeric_reference\":\"0001\",\"scheme_transaction_id\":\"167224449400460220\",\"payment_purpose\":\"001\",\"payment_scheme\":\"FPS\",\"processing_date\":\"2018-09-18\",\"reference\":\"D/1234567890123456\",\"regulatory_reporting\":\"May be required for some foreign originated payments\",\"remittance_information\":\"Remittance information - Additional remittance information over and above reference information\",\"scheme_payment_type\":\"ImmediatePayment\"},\"relationships\":{\"payment_submission\":{\"data\":[]},\"payment_return\":{\"data\":[]},\"payment_admission\":{\"data\":[]},\"payment_reversal\":{\"data\":[]}}},\"links\":{\"self\":\"/v1/transaction/payments\",\"first\":\"/v1/transaction/payments?page[number]=first\",\"last\":\"/v1/transaction/payments?page[number]=last\"}}"
						}
					]
				},
				{
					"name": "/claims/{id}/reversals/{id}/submissions/{id}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateNumber() {",
									"  function s4() {",
									"    return Math.floor((1 + Math.random()) * 100000000000000000).toString();",
									"  }",
									"  return s4();",
									"}",
									"",
									"var today = new Date();",
									"var dd = today.getDate();",
									"var mm = today.getMonth()+1; ",
									"",
									"var yyyy = today.getFullYear();",
									"if(dd<10){",
									"    dd='0'+dd;",
									"} ",
									"if(mm<10){",
									"    mm='0'+mm;",
									"} ",
									"var today = yyyy + '-' + mm + '-' + dd;",
									"postman.setEnvironmentVariable(\"processing_date\", today);",
									"postman.setEnvironmentVariable(\"scheme_transaction_id\", generateNumber());",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/claims/{{claim_id}}/reversals/{{claim_reversal_id}}/submissions/{{claim_reversal_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"claims",
								"{{claim_id}}",
								"reversals",
								"{{claim_reversal_id}}",
								"submissions",
								"{{claim_reversal_submission_id}}"
							]
						}
					},
					"response": [
						{
							"name": "/payments",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{{$guid}}\",\n        \"version\": 0,\n        \"organisation_id\": \"{{organisation_id}}\",\n        \"attributes\": {\n            \"amount\": \"231\",\n            \"beneficiary_party\": {\n                \"account_name\": \"Mrs Receiving Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_type\": 1,\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"currency\": \"GBP\",\n            \"debtor_party\": {\n                \"account_name\": \"Mr Sending Test\",\n                \"account_number\": \"73442403\",\n                \"account_number_code\": \"BBAN\",\n                \"account_with\": {\n                    \"bank_id\": \"040013\",\n                    \"bank_id_code\": \"GBDSC\"\n                },\n                \"address\": [\n                    \"2 Alexandra Crescent, Ilkley LS29 9ER\"\n                ],\n                \"country\": \"GB\"\n            },\n            \"end_to_end_reference\": \"00151519632ZCBBBJQ\",\n            \"numeric_reference\": \"0001\",\n            \"scheme_transaction_id\": \"{{scheme_transaction_id}}\",\n            \"payment_purpose\": \"001\",\n            \"processing_date\": \"{{processing_date}}\",\n            \"reference\": \"D/1234567890123456\",\n            \"regulatory_reporting\": \"May be required for some foreign originated payments\",\n            \"remittance_information\": \"Remittance information - Additional remittance information over and above reference information\",\n            \"scheme_payment_type\": \"ImmediatePayment\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{base_url}}/transaction/payments",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"transaction",
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 18 Sep 2018 14:12:54 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "Via",
									"value": "kong/0.10.3",
									"name": "Via",
									"description": "Informs the client of proxies through which the response was sent."
								},
								{
									"key": "X-Kong-Proxy-Latency",
									"value": "3",
									"name": "X-Kong-Proxy-Latency",
									"description": "Custom header"
								},
								{
									"key": "X-Kong-Upstream-Latency",
									"value": "54",
									"name": "X-Kong-Upstream-Latency",
									"description": "Custom header"
								},
								{
									"key": "content-encoding",
									"value": "gzip",
									"name": "content-encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "l5d-success-class",
									"value": "1.0",
									"name": "l5d-success-class",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\"data\":{\"type\":\"payments\",\"id\":\"7cf2eab8-8cdf-4bef-9c82-08dd379175b9\",\"version\":0,\"organisation_id\":\"bfa6b185-a6fa-8095-06ba-4a82ab4203d0\",\"attributes\":{\"amount\":\"231\",\"beneficiary_party\":{\"account_name\":\"Mrs Receiving Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_type\":1,\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"1 Clarence Mew, Horsforth, Leeds Ls18 4EP\"],\"country\":\"GB\"},\"currency\":\"GBP\",\"debtor_party\":{\"account_name\":\"Mr Sending Test\",\"account_number\":\"73442403\",\"account_number_code\":\"BBAN\",\"account_with\":{\"bank_id\":\"040013\",\"bank_id_code\":\"GBDSC\"},\"address\":[\"2 Alexandra Crescent, Ilkley LS29 9ER\"],\"country\":\"GB\"},\"end_to_end_reference\":\"00151519632ZCBBBJQ\",\"numeric_reference\":\"0001\",\"scheme_transaction_id\":\"167224449400460220\",\"payment_purpose\":\"001\",\"payment_scheme\":\"FPS\",\"processing_date\":\"2018-09-18\",\"reference\":\"D/1234567890123456\",\"regulatory_reporting\":\"May be required for some foreign originated payments\",\"remittance_information\":\"Remittance information - Additional remittance information over and above reference information\",\"scheme_payment_type\":\"ImmediatePayment\"},\"relationships\":{\"payment_submission\":{\"data\":[]},\"payment_return\":{\"data\":[]},\"payment_admission\":{\"data\":[]},\"payment_reversal\":{\"data\":[]}}},\"links\":{\"self\":\"/v1/transaction/payments\",\"first\":\"/v1/transaction/payments?page[number]=first\",\"last\":\"/v1/transaction/payments?page[number]=last\"}}"
						}
					]
				}
			]
		},
		{
			"name": "Queries",
			"item": [
				{
					"name": "/queries",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/queries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"queries"
							]
						}
					},
					"response": []
				},
				{
					"name": "/queries/{query_id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes is populated'] = _.has(json.data, 'attributes')",
									"    postman.setEnvironmentVariable(\"query_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/queries/{{query_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"queries",
								"{{query_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/queries/{query_id}/admissions/{query_admission_id}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/queries/{{query_id}}/admissions/{{query_admission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"queries",
								"{{query_id}}",
								"admissions",
								"{{query_admission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/queries/{query_id}/responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.relationships is populated'] = _.has(json.data, 'relationships')",
									"    postman.setEnvironmentVariable(\"query_response_id\", json.data.id);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{request_date}}",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "{{request_signing_digest}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":{\n\t    \"type\": \"query_responses\",\n\t    \"id\": \"{{random_guid}}\",\n\t    \"organisation_id\": \"{{organisation_id}}\",\n\t    \"attributes\": {\n\t        \"answer\" :\"accepted\",\n\t        \"currency\": \"EUR\",\n\t        \"compensation_amount\": \"1.00\"\n\t    }\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/transaction/queries/{{query_id}}/responses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"queries",
								"{{query_id}}",
								"responses"
							]
						}
					},
					"response": []
				},
				{
					"name": "/queries/{query_id}/responses/{query_response_id}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/queries/{{query_id}}/responses/{{query_response_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"queries",
								"{{query_id}}",
								"responses",
								"{{query_response_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/queries/{query_id}/responses/{query_response_id}/submissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"response code is 201\"] = responseCode.code === 201;",
									"",
									"",
									"try { ",
									"    var json = JSON.parse(responseBody);",
									"    tests['response is valid JSON'] = true;",
									"    tests['data.id is present'] = _.has(json.data, 'id');",
									"    tests['data.attributes is populated'] = _.has(json.data, 'attributes')",
									"    tests['data.relationships is populated'] = _.has(json.data, 'relationships')",
									"    postman.setEnvironmentVariable(\"query_response_submission_id\", json.data.id);",
									"    postman.setEnvironmentVariable(\"query_response_submission_version\", json.data.version);",
									"}",
									"catch (e) { ",
									"    tests['error: ' + e] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							},
							{
								"key": "Digest",
								"type": "text",
								"value": "{{request_signing_digest}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\":{\n\t    \"type\": \"query_response_submissions\",\n\t    \"id\": \"{{random_guid}}\",\n\t    \"organisation_id\": \"{{organisation_id}}\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/transaction/queries/{{query_id}}/responses/{{query_response_id}}/submissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"queries",
								"{{query_id}}",
								"responses",
								"{{query_response_id}}",
								"submissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/queries/{query_id}/responses/{query_response_id}/submissions/{query_response_submission_id}",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{authorization}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{request_date}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/transaction/queries/{{query_id}}/responses/{{query_response_id}}/submissions/{{query_response_submission_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"transaction",
								"queries",
								"{{query_id}}",
								"responses",
								"{{query_response_id}}",
								"submissions",
								"{{query_response_submission_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GoService",
			"item": [
				{
					"name": "GetAccount",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/accounts?account_id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"accounts"
							],
							"query": [
								{
									"key": "account_id",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Account",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"data\": {\r\n    \"type\": \"accounts\",\r\n    \"id\": \"ad27e265-9605-4b4b-a0e5-3003ea9cc4dc\",\r\n    \"organisation_id\": \"eb0bd6f5-c3f5-44b2-b677-acd23cdde73c\",\r\n    \"attributes\": {\r\n      \"country\": \"GB\",\r\n      \"base_currency\": \"GBP\",\r\n      \"bank_id\": \"400300\",\r\n      \"bank_id_code\": \"GBDSC\",\r\n      \"bic\": \"NWBKGB22\",\r\n      \"name\": [\r\n        \"Samantha Holder\"\r\n      ],\r\n      \"alternative_names\": [\r\n        \"Sam Holder\"\r\n      ],\r\n      \"user_defined_data\": [\r\n        {\r\n          \"key\": \"Some account related key\",\r\n          \"value\": \"Some account related value\"\r\n        }\r\n      ],\r\n      \"validation_type\": \"card\",\r\n      \"reference_mask\": \"############\",\r\n      \"acceptance_qualifier\": \"same_day\"\r\n    }\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/organisation/accounts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"organisation",
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Account By Id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/organisation/accounts/ad27e265-9605-4b4b-a0e5-3003ea9cc4dc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"organisation",
						"accounts",
						"ad27e265-9605-4b4b-a0e5-3003ea9cc4dc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Account",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/organisation/accounts/ad27e265-9605-4b4b-a0e5-3003ea9cc4dc?version=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"organisation",
						"accounts",
						"ad27e265-9605-4b4b-a0e5-3003ea9cc4dc"
					],
					"query": [
						{
							"key": "version",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Accounts",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/organisation/accounts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"organisation",
						"accounts"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// v 0.0.1",
					"",
					"const url = require('url')",
					"const uuid = require('uuid');",
					"const moment = require('moment');",
					"const crypto = require('crypto-js')",
					"",
					"function generateNumber() {",
					"  function s4() {",
					"    return Math.floor((1 + Math.random()) * 100000000000000000).toString();",
					"  }",
					"  return s4();",
					"}",
					"",
					"var now = new Date();",
					"var dd = now.getDate();",
					"var mm = now.getMonth()+1; ",
					"",
					"var yyyy = now.getFullYear();",
					"if(dd<10){",
					"    dd='0'+dd;",
					"} ",
					"if(mm<10){",
					"    mm='0'+mm;",
					"} ",
					"var today = yyyy + '-' + mm + '-' + dd;",
					"",
					"postman.setEnvironmentVariable(\"processing_date\", today);",
					"postman.setEnvironmentVariable(\"scheme_transaction_id\", generateNumber());",
					"postman.setEnvironmentVariable(\"end_to_end_reference\", uuid.v4().replace(/-/g, \"\") )",
					"postman.setEnvironmentVariable(\"reference\", `D/${now.getTime()}` )",
					"",
					"pm.environment.set(\"request_date\", moment().format(\"ddd, DD MMM YYYY, h:mm:ss ZZ\"));",
					"",
					"const digestMethod = function(text) {",
					"    return crypto.SHA256(text)",
					"}",
					"",
					"// Postman Gotcha nr1",
					"// {{$guid}} not evaluated in pre-request-script",
					"// need to evaluate guid here and then put it in variable to be in sync with `body` using {{$guid}}",
					"// othwerwise incorrect signature would be calculated",
					"// https://github.com/postmanlabs/postman-app-support/issues/886#event-1776993816",
					"random_guid = uuid.v4()",
					"pm.environment.set(\"random_guid\", random_guid)",
					"",
					"const public_key_id = pm.environment.get(\"request_signing_public_key_id\")",
					"const private_key = pm.environment.get(\"request_signing_private_key\")",
					"",
					"// If its using Basic like /oauth2/token then ignore it",
					"if(request.headers['authorization'] === \"Basic\") {",
					"    return",
					"}",
					"",
					"if(_.isEmpty(public_key_id) && _.isEmpty(private_key)) {",
					"    console.log(\"Request made using token.\")",
					"    ",
					"    // use token based authorization",
					"    token = pm.environment.get(\"token\")",
					"    pm.environment.set(\"authorization\", `bearer ${token}`);",
					"    return",
					"}",
					"",
					"console.log(\"Request made using request signing.\")",
					"",
					"if(_.isEmpty(public_key_id)) {",
					"    throw new Error(\"request_signing_public_key_id expected but it is empty, aborting.\");",
					"}",
					"",
					"if(_.isEmpty(private_key)) {",
					"    throw new Error(\"request_signing_private_key expected but it is empty, aborting.\");",
					"}",
					"",
					"function envValue(key) {",
					"    value = pm.environment.get(key)",
					"    if (value === '') {",
					"        return value",
					"    }",
					"    return value || `{{${key}}}`",
					"}",
					"",
					"// Postman Gotcha nr2",
					"// {{base_url}} and other variables are not resolved in pre-request script",
					"// https://github.com/postmanlabs/postman-app-support/issufes/4373",
					"function resolved_url() {",
					"    raw_url = request.url",
					"    ",
					"    resolved_url = raw_url.replace(/{{(\\w*)}}/g,function(str,key) {return envValue(key)});",
					"    return resolved_url",
					"}",
					"",
					"function resolved_body() {",
					"    ",
					"    if(typeof request.data === 'object') { // body is object",
					"        throw new Error('Incorrect body encoding aborting.')",
					"    } else { // body is string",
					"        // We match the keys we can fidn and replace",
					"        // but if a key is not found we replace the value with {{key}}",
					"        // this is how postman works if there is no variable defined it doesnt touch the key",
					"        resolved_body = request.data.replace(/{{(\\w*)}}/g,function(str,key) {return envValue(key)});",
					"    }",
					"    ",
					"    return resolved_body",
					"}",
					"",
					"",
					"headers_for_body = []",
					"if(!_.isEmpty(request.data)) {",
					"    request_resolved_body = resolved_body()",
					"    digest = digestMethod(request_resolved_body).toString(crypto.enc.Base64)",
					"    pm.environment.set(\"request_signing_digest\", digest);",
					"    ",
					"    headers_for_body = [",
					"        { key: \"digest\", value: `SHA-256=${digest}`}, ",
					"        { key: \"content-length\", value: request_resolved_body.length},",
					"    ]",
					"}",
					"",
					"const request_resolved_url = resolved_url()",
					"",
					"const debug_endpoint_url = \"http-signatures/debug\"",
					"is_debug_request = false",
					"",
					"if (request_resolved_url.indexOf(debug_endpoint_url) !== -1) {",
					"    is_debug_request = true",
					"}",
					"",
					"",
					"// Required to make jsencrypt work - its not affecting signature generation",
					"navigator = {};",
					"window = {};",
					"// load jsencrypt from variable",
					"// current solution works only with jsencrypt >= 3.0.0",
					"eval(pm.variables.get(\"jsencrypt-3.0.0-rc.1\"));",
					"",
					"const jsencrypt = new window.JSEncrypt();",
					"",
					"jsencrypt.setKey(private_key)",
					"",
					"parsed_url = url.parse(request_resolved_url)",
					"",
					"headers = [...headers_for_body,",
					"    { key: \"(request-target)\", value: `${request.method.toLowerCase()} ${parsed_url.path}` },",
					"    { key: \"host\", value: parsed_url.host},",
					"    { key: \"date\", value: pm.environment.get(\"request_date\") },",
					"    { key: \"accept\", value: request.headers['accept']},",
					"    { key: \"content-type\", value: request.headers['content-type']},",
					"].filter(e => Boolean(e.value))",
					"",
					"signature_string = headers",
					"                   .map(e => `${e.key}: ${e.value}`)",
					"                   .join(\"\\n\")",
					"",
					"headers_string = headers",
					"                 .map(e => e.key).join(\" \")",
					"",
					"signed_signature = jsencrypt.sign(signature_string, digestMethod, \"sha256\") ",
					"",
					"signature = `Signature keyId=\"${public_key_id}\",algorithm=\"rsa-sha256\",headers=\"${headers_string}\",signature=\"${signed_signature}\"`",
					"",
					"signature_debug_parsed = crypto.enc.Utf8.parse(signature_string)",
					"signature_debug = crypto.enc.Base64.stringify(signature_debug_parsed)",
					"",
					"if(is_debug_request) {",
					"    pm.environment.set(\"request_signing_signature_debug\", signature_debug);",
					"}",
					"",
					"pm.environment.set(\"authorization\", signature);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jsencrypt-3.0.0-rc.1",
			"value": "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e(t.JSEncrypt={})}(this,function(t){\"use strict\";var e=\"0123456789abcdefghijklmnopqrstuvwxyz\";function a(t){return e.charAt(t)}function i(t,e){return t&e}function u(t,e){return t|e}function r(t,e){return t^e}function n(t,e){return t&~e}function s(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function o(t){for(var e=0;0!=t;)t&=t-1,++e;return e}var h=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";function c(t){var e,i,r=\"\";for(e=0;e+3<=t.length;e+=3)i=parseInt(t.substring(e,e+3),16),r+=h.charAt(i>>6)+h.charAt(63&i);for(e+1==t.length?(i=parseInt(t.substring(e,e+1),16),r+=h.charAt(i<<2)):e+2==t.length&&(i=parseInt(t.substring(e,e+2),16),r+=h.charAt(i>>2)+h.charAt((3&i)<<4));0<(3&r.length);)r+=\"=\";return r}function f(t){var e,i=\"\",r=0,n=0;for(e=0;e<t.length&&\"=\"!=t.charAt(e);++e){var s=h.indexOf(t.charAt(e));s<0||(0==r?(i+=a(s>>2),n=3&s,r=1):1==r?(i+=a(n<<2|s>>4),n=15&s,r=2):2==r?(i+=a(n),i+=a(s>>2),n=3&s,r=3):(i+=a(n<<2|s>>4),i+=a(15&s),r=0))}return 1==r&&(i+=a(n<<2)),i}var l,p=function(t,e){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};var g,d=function(t){var e;if(void 0===l){var i=\"0123456789ABCDEF\",r=\" \\f\\n\\r\\t \\u2028\\u2029\";for(l={},e=0;e<16;++e)l[i.charAt(e)]=e;for(i=i.toLowerCase(),e=10;e<16;++e)l[i.charAt(e)]=e;for(e=0;e<r.length;++e)l[r.charAt(e)]=-1}var n=[],s=0,o=0;for(e=0;e<t.length;++e){var h=t.charAt(e);if(\"=\"==h)break;if(-1!=(h=l[h])){if(void 0===h)throw new Error(\"Illegal character at offset \"+e);s|=h,2<=++o?(n[n.length]=s,o=s=0):s<<=4}}if(o)throw new Error(\"Hex encoding incomplete: 4 bits missing\");return n},v={decode:function(t){var e;if(void 0===g){var i=\"= \\f\\n\\r\\t \\u2028\\u2029\";for(g=Object.create(null),e=0;e<64;++e)g[\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".charAt(e)]=e;for(e=0;e<i.length;++e)g[i.charAt(e)]=-1}var r=[],n=0,s=0;for(e=0;e<t.length;++e){var o=t.charAt(e);if(\"=\"==o)break;if(-1!=(o=g[o])){if(void 0===o)throw new Error(\"Illegal character at offset \"+e);n|=o,4<=++s?(r[r.length]=n>>16,r[r.length]=n>>8&255,r[r.length]=255&n,s=n=0):n<<=6}}switch(s){case 1:throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");case 2:r[r.length]=n>>10;break;case 3:r[r.length]=n>>16,r[r.length]=n>>8&255}return r},re:/-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,unarmor:function(t){var e=v.re.exec(t);if(e)if(e[1])t=e[1];else{if(!e[2])throw new Error(\"RegExp out of sync\");t=e[2]}return v.decode(t)}},m=1e13,y=function(){function t(t){this.buf=[+t||0]}return t.prototype.mulAdd=function(t,e){var i,r,n=this.buf,s=n.length;for(i=0;i<s;++i)(r=n[i]*t+e)<m?e=0:r-=(e=0|r/m)*m,n[i]=r;0<e&&(n[i]=e)},t.prototype.sub=function(t){var e,i,r=this.buf,n=r.length;for(e=0;e<n;++e)(i=r[e]-t)<0?(i+=m,t=1):t=0,r[e]=i;for(;0===r[r.length-1];)r.pop()},t.prototype.toString=function(t){if(10!=(t||10))throw new Error(\"only base 10 is supported\");for(var e=this.buf,i=e[e.length-1].toString(),r=e.length-2;0<=r;--r)i+=(m+e[r]).toString().substring(1);return i},t.prototype.valueOf=function(){for(var t=this.buf,e=0,i=t.length-1;0<=i;--i)e=e*m+t[i];return e},t.prototype.simplify=function(){var t=this.buf;return 1==t.length?t[0]:this},t}(),b=\"…\",T=/^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/,S=/^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;function E(t,e){return t.length>e&&(t=t.substring(0,e)+b),t}var w,D=function(){function i(t,e){this.hexDigits=\"0123456789ABCDEF\",t instanceof i?(this.enc=t.enc,this.pos=t.pos):(this.enc=t,this.pos=e)}return i.prototype.get=function(t){if(void 0===t&&(t=this.pos++),t>=this.enc.length)throw new Error(\"Requesting byte offset \"+t+\" on a stream of length \"+this.enc.length);return\"string\"==typeof this.enc?this.enc.charCodeAt(t):this.enc[t]},i.prototype.hexByte=function(t){return this.hexDigits.charAt(t>>4&15)+this.hexDigits.charAt(15&t)},i.prototype.hexDump=function(t,e,i){for(var r=\"\",n=t;n<e;++n)if(r+=this.hexByte(this.get(n)),!0!==i)switch(15&n){case 7:r+=\"  \";break;case 15:r+=\"\\n\";break;default:r+=\" \"}return r},i.prototype.isASCII=function(t,e){for(var i=t;i<e;++i){var r=this.get(i);if(r<32||176<r)return!1}return!0},i.prototype.parseStringISO=function(t,e){for(var i=\"\",r=t;r<e;++r)i+=String.fromCharCode(this.get(r));return i},i.prototype.parseStringUTF=function(t,e){for(var i=\"\",r=t;r<e;){var n=this.get(r++);i+=n<128?String.fromCharCode(n):191<n&&n<224?String.fromCharCode((31&n)<<6|63&this.get(r++)):String.fromCharCode((15&n)<<12|(63&this.get(r++))<<6|63&this.get(r++))}return i},i.prototype.parseStringBMP=function(t,e){for(var i,r,n=\"\",s=t;s<e;)i=this.get(s++),r=this.get(s++),n+=String.fromCharCode(i<<8|r);return n},i.prototype.parseTime=function(t,e,i){var r=this.parseStringISO(t,e),n=(i?T:S).exec(r);return n?(i&&(n[1]=+n[1],n[1]+=+n[1]<70?2e3:1900),r=n[1]+\"-\"+n[2]+\"-\"+n[3]+\" \"+n[4],n[5]&&(r+=\":\"+n[5],n[6]&&(r+=\":\"+n[6],n[7]&&(r+=\".\"+n[7]))),n[8]&&(r+=\" UTC\",\"Z\"!=n[8]&&(r+=n[8],n[9]&&(r+=\":\"+n[9]))),r):\"Unrecognized time: \"+r},i.prototype.parseInteger=function(t,e){for(var i,r=this.get(t),n=127<r,s=n?255:0,o=\"\";r==s&&++t<e;)r=this.get(t);if(0===(i=e-t))return n?-1:0;if(4<i){for(o=r,i<<=3;0==(128&(+o^s));)o=+o<<1,--i;o=\"(\"+i+\" bit)\\n\"}n&&(r-=256);for(var h=new y(r),a=t+1;a<e;++a)h.mulAdd(256,this.get(a));return o+h.toString()},i.prototype.parseBitString=function(t,e,i){for(var r=this.get(t),n=\"(\"+((e-t-1<<3)-r)+\" bit)\\n\",s=\"\",o=t+1;o<e;++o){for(var h=this.get(o),a=o==e-1?r:0,u=7;a<=u;--u)s+=h>>u&1?\"1\":\"0\";if(s.length>i)return n+E(s,i)}return n+s},i.prototype.parseOctetString=function(t,e,i){if(this.isASCII(t,e))return E(this.parseStringISO(t,e),i);var r=e-t,n=\"(\"+r+\" byte)\\n\";(i/=2)<r&&(e=t+i);for(var s=t;s<e;++s)n+=this.hexByte(this.get(s));return i<r&&(n+=b),n},i.prototype.parseOID=function(t,e,i){for(var r=\"\",n=new y,s=0,o=t;o<e;++o){var h=this.get(o);if(n.mulAdd(128,127&h),s+=7,!(128&h)){if(\"\"===r)if((n=n.simplify())instanceof y)n.sub(80),r=\"2.\"+n.toString();else{var a=n<80?n<40?0:1:2;r=a+\".\"+(n-40*a)}else r+=\".\"+n.toString();if(r.length>i)return E(r,i);n=new y,s=0}}return 0<s&&(r+=\".incomplete\"),r},i}(),x=function(){function c(t,e,i,r,n){if(!(r instanceof R))throw new Error(\"Invalid tag value.\");this.stream=t,this.header=e,this.length=i,this.tag=r,this.sub=n}return c.prototype.typeName=function(){switch(this.tag.tagClass){case 0:switch(this.tag.tagNumber){case 0:return\"EOC\";case 1:return\"BOOLEAN\";case 2:return\"INTEGER\";case 3:return\"BIT_STRING\";case 4:return\"OCTET_STRING\";case 5:return\"NULL\";case 6:return\"OBJECT_IDENTIFIER\";case 7:return\"ObjectDescriptor\";case 8:return\"EXTERNAL\";case 9:return\"REAL\";case 10:return\"ENUMERATED\";case 11:return\"EMBEDDED_PDV\";case 12:return\"UTF8String\";case 16:return\"SEQUENCE\";case 17:return\"SET\";case 18:return\"NumericString\";case 19:return\"PrintableString\";case 20:return\"TeletexString\";case 21:return\"VideotexString\";case 22:return\"IA5String\";case 23:return\"UTCTime\";case 24:return\"GeneralizedTime\";case 25:return\"GraphicString\";case 26:return\"VisibleString\";case 27:return\"GeneralString\";case 28:return\"UniversalString\";case 30:return\"BMPString\"}return\"Universal_\"+this.tag.tagNumber.toString();case 1:return\"Application_\"+this.tag.tagNumber.toString();case 2:return\"[\"+this.tag.tagNumber.toString()+\"]\";case 3:return\"Private_\"+this.tag.tagNumber.toString()}},c.prototype.content=function(t){if(void 0===this.tag)return null;void 0===t&&(t=1/0);var e=this.posContent(),i=Math.abs(this.length);if(!this.tag.isUniversal())return null!==this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(e,e+i,t);switch(this.tag.tagNumber){case 1:return 0===this.stream.get(e)?\"false\":\"true\";case 2:return this.stream.parseInteger(e,e+i);case 3:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseBitString(e,e+i,t);case 4:return this.sub?\"(\"+this.sub.length+\" elem)\":this.stream.parseOctetString(e,e+i,t);case 6:return this.stream.parseOID(e,e+i,t);case 16:case 17:return null!==this.sub?\"(\"+this.sub.length+\" elem)\":\"(no elem)\";case 12:return E(this.stream.parseStringUTF(e,e+i),t);case 18:case 19:case 20:case 21:case 22:case 26:return E(this.stream.parseStringISO(e,e+i),t);case 30:return E(this.stream.parseStringBMP(e,e+i),t);case 23:case 24:return this.stream.parseTime(e,e+i,23==this.tag.tagNumber)}return null},c.prototype.toString=function(){return this.typeName()+\"@\"+this.stream.pos+\"[header:\"+this.header+\",length:\"+this.length+\",sub:\"+(null===this.sub?\"null\":this.sub.length)+\"]\"},c.prototype.toPrettyString=function(t){void 0===t&&(t=\"\");var e=t+this.typeName()+\" @\"+this.stream.pos;if(0<=this.length&&(e+=\"+\"),e+=this.length,this.tag.tagConstructed?e+=\" (constructed)\":!this.tag.isUniversal()||3!=this.tag.tagNumber&&4!=this.tag.tagNumber||null===this.sub||(e+=\" (encapsulates)\"),e+=\"\\n\",null!==this.sub){t+=\"  \";for(var i=0,r=this.sub.length;i<r;++i)e+=this.sub[i].toPrettyString(t)}return e},c.prototype.posStart=function(){return this.stream.pos},c.prototype.posContent=function(){return this.stream.pos+this.header},c.prototype.posEnd=function(){return this.stream.pos+this.header+Math.abs(this.length)},c.prototype.toHexString=function(){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)},c.decodeLength=function(t){var e=t.get(),i=127&e;if(i==e)return i;if(6<i)throw new Error(\"Length over 48 bits not supported at position \"+(t.pos-1));if(0===i)return null;for(var r=e=0;r<i;++r)e=256*e+t.get();return e},c.prototype.getHexStringValue=function(){var t=this.toHexString(),e=2*this.header,i=2*this.length;return t.substr(e,i)},c.decode=function(t){var r;r=t instanceof D?t:new D(t,0);var e=new D(r),i=new R(r),n=c.decodeLength(r),s=r.pos,o=s-e.pos,h=null,a=function(){var t=[];if(null!==n){for(var e=s+n;r.pos<e;)t[t.length]=c.decode(r);if(r.pos!=e)throw new Error(\"Content size is not correct for container starting at offset \"+s)}else try{for(;;){var i=c.decode(r);if(i.tag.isEOC())break;t[t.length]=i}n=s-r.pos}catch(t){throw new Error(\"Exception while decoding undefined length content: \"+t)}return t};if(i.tagConstructed)h=a();else if(i.isUniversal()&&(3==i.tagNumber||4==i.tagNumber))try{if(3==i.tagNumber&&0!=r.get())throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");h=a();for(var u=0;u<h.length;++u)if(h[u].tag.isEOC())throw new Error(\"EOC is not supposed to be actual content.\")}catch(t){h=null}if(null===h){if(null===n)throw new Error(\"We can't skip over an invalid tag with undefined length at offset \"+s);r.pos=s+Math.abs(n)}return new c(e,o,n,i,h)},c}(),R=function(){function t(t){var e=t.get();if(this.tagClass=e>>6,this.tagConstructed=0!=(32&e),this.tagNumber=31&e,31==this.tagNumber){for(var i=new y;e=t.get(),i.mulAdd(128,127&e),128&e;);this.tagNumber=i.simplify()}}return t.prototype.isUniversal=function(){return 0===this.tagClass},t.prototype.isEOC=function(){return 0===this.tagClass&&0===this.tagNumber},t}(),B=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],A=(1<<26)/B[B.length-1],O=function(){function b(t,e,i){null!=t&&(\"number\"==typeof t?this.fromNumber(t,e,i):null==e&&\"string\"!=typeof t?this.fromString(t,256):this.fromString(t,e))}return b.prototype.toString=function(t){if(this.s<0)return\"-\"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var i,r=(1<<e)-1,n=!1,s=\"\",o=this.t,h=this.DB-o*this.DB%e;if(0<o--)for(h<this.DB&&0<(i=this[o]>>h)&&(n=!0,s=a(i));0<=o;)h<e?(i=(this[o]&(1<<h)-1)<<e-h,i|=this[--o]>>(h+=this.DB-e)):(i=this[o]>>(h-=e)&r,h<=0&&(h+=this.DB,--o)),0<i&&(n=!0),n&&(s+=a(i));return n?s:\"0\"},b.prototype.negate=function(){var t=M();return b.ZERO.subTo(this,t),t},b.prototype.abs=function(){return this.s<0?this.negate():this},b.prototype.compareTo=function(t){var e=this.s-t.s;if(0!=e)return e;var i=this.t;if(0!=(e=i-t.t))return this.s<0?-e:e;for(;0<=--i;)if(0!=(e=this[i]-t[i]))return e;return 0},b.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+U(this[this.t-1]^this.s&this.DM)},b.prototype.mod=function(t){var e=M();return this.abs().divRemTo(t,null,e),this.s<0&&0<e.compareTo(b.ZERO)&&t.subTo(e,e),e},b.prototype.modPowInt=function(t,e){var i;return i=t<256||e.isEven()?new I(e):new N(e),this.exp(t,i)},b.prototype.clone=function(){var t=M();return this.copyTo(t),t},b.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},b.prototype.byteValue=function(){return 0==this.t?this.s:this[0]<<24>>24},b.prototype.shortValue=function(){return 0==this.t?this.s:this[0]<<16>>16},b.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},b.prototype.toByteArray=function(){var t=this.t,e=[];e[0]=this.s;var i,r=this.DB-t*this.DB%8,n=0;if(0<t--)for(r<this.DB&&(i=this[t]>>r)!=(this.s&this.DM)>>r&&(e[n++]=i|this.s<<this.DB-r);0<=t;)r<8?(i=(this[t]&(1<<r)-1)<<8-r,i|=this[--t]>>(r+=this.DB-8)):(i=this[t]>>(r-=8)&255,r<=0&&(r+=this.DB,--t)),0!=(128&i)&&(i|=-256),0==n&&(128&this.s)!=(128&i)&&++n,(0<n||i!=this.s)&&(e[n++]=i);return e},b.prototype.equals=function(t){return 0==this.compareTo(t)},b.prototype.min=function(t){return this.compareTo(t)<0?this:t},b.prototype.max=function(t){return 0<this.compareTo(t)?this:t},b.prototype.and=function(t){var e=M();return this.bitwiseTo(t,i,e),e},b.prototype.or=function(t){var e=M();return this.bitwiseTo(t,u,e),e},b.prototype.xor=function(t){var e=M();return this.bitwiseTo(t,r,e),e},b.prototype.andNot=function(t){var e=M();return this.bitwiseTo(t,n,e),e},b.prototype.not=function(){for(var t=M(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},b.prototype.shiftLeft=function(t){var e=M();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},b.prototype.shiftRight=function(t){var e=M();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},b.prototype.getLowestSetBit=function(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+s(this[t]);return this.s<0?this.t*this.DB:-1},b.prototype.bitCount=function(){for(var t=0,e=this.s&this.DM,i=0;i<this.t;++i)t+=o(this[i]^e);return t},b.prototype.testBit=function(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},b.prototype.setBit=function(t){return this.changeBit(t,u)},b.prototype.clearBit=function(t){return this.changeBit(t,n)},b.prototype.flipBit=function(t){return this.changeBit(t,r)},b.prototype.add=function(t){var e=M();return this.addTo(t,e),e},b.prototype.subtract=function(t){var e=M();return this.subTo(t,e),e},b.prototype.multiply=function(t){var e=M();return this.multiplyTo(t,e),e},b.prototype.divide=function(t){var e=M();return this.divRemTo(t,e,null),e},b.prototype.remainder=function(t){var e=M();return this.divRemTo(t,null,e),e},b.prototype.divideAndRemainder=function(t){var e=M(),i=M();return this.divRemTo(t,e,i),[e,i]},b.prototype.modPow=function(t,e){var i,r,n=t.bitLength(),s=F(1);if(n<=0)return s;i=n<18?1:n<48?3:n<144?4:n<768?5:6,r=n<8?new I(e):e.isEven()?new P(e):new N(e);var o=[],h=3,a=i-1,u=(1<<i)-1;if(o[1]=r.convert(this),1<i){var c=M();for(r.sqrTo(o[1],c);h<=u;)o[h]=M(),r.mulTo(c,o[h-2],o[h]),h+=2}var f,l,p=t.t-1,g=!0,d=M();for(n=U(t[p])-1;0<=p;){for(a<=n?f=t[p]>>n-a&u:(f=(t[p]&(1<<n+1)-1)<<a-n,0<p&&(f|=t[p-1]>>this.DB+n-a)),h=i;0==(1&f);)f>>=1,--h;if((n-=h)<0&&(n+=this.DB,--p),g)o[f].copyTo(s),g=!1;else{for(;1<h;)r.sqrTo(s,d),r.sqrTo(d,s),h-=2;0<h?r.sqrTo(s,d):(l=s,s=d,d=l),r.mulTo(d,o[f],s)}for(;0<=p&&0==(t[p]&1<<n);)r.sqrTo(s,d),l=s,s=d,d=l,--n<0&&(n=this.DB-1,--p)}return r.revert(s)},b.prototype.modInverse=function(t){var e=t.isEven();if(this.isEven()&&e||0==t.signum())return b.ZERO;for(var i=t.clone(),r=this.clone(),n=F(1),s=F(0),o=F(0),h=F(1);0!=i.signum();){for(;i.isEven();)i.rShiftTo(1,i),e?(n.isEven()&&s.isEven()||(n.addTo(this,n),s.subTo(t,s)),n.rShiftTo(1,n)):s.isEven()||s.subTo(t,s),s.rShiftTo(1,s);for(;r.isEven();)r.rShiftTo(1,r),e?(o.isEven()&&h.isEven()||(o.addTo(this,o),h.subTo(t,h)),o.rShiftTo(1,o)):h.isEven()||h.subTo(t,h),h.rShiftTo(1,h);0<=i.compareTo(r)?(i.subTo(r,i),e&&n.subTo(o,n),s.subTo(h,s)):(r.subTo(i,r),e&&o.subTo(n,o),h.subTo(s,h))}return 0!=r.compareTo(b.ONE)?b.ZERO:0<=h.compareTo(t)?h.subtract(t):h.signum()<0?(h.addTo(t,h),h.signum()<0?h.add(t):h):h},b.prototype.pow=function(t){return this.exp(t,new V)},b.prototype.gcd=function(t){var e=this.s<0?this.negate():this.clone(),i=t.s<0?t.negate():t.clone();if(e.compareTo(i)<0){var r=e;e=i,i=r}var n=e.getLowestSetBit(),s=i.getLowestSetBit();if(s<0)return e;for(n<s&&(s=n),0<s&&(e.rShiftTo(s,e),i.rShiftTo(s,i));0<e.signum();)0<(n=e.getLowestSetBit())&&e.rShiftTo(n,e),0<(n=i.getLowestSetBit())&&i.rShiftTo(n,i),0<=e.compareTo(i)?(e.subTo(i,e),e.rShiftTo(1,e)):(i.subTo(e,i),i.rShiftTo(1,i));return 0<s&&i.lShiftTo(s,i),i},b.prototype.isProbablePrime=function(t){var e,i=this.abs();if(1==i.t&&i[0]<=B[B.length-1]){for(e=0;e<B.length;++e)if(i[0]==B[e])return!0;return!1}if(i.isEven())return!1;for(e=1;e<B.length;){for(var r=B[e],n=e+1;n<B.length&&r<A;)r*=B[n++];for(r=i.modInt(r);e<n;)if(r%B[e++]==0)return!1}return i.millerRabin(t)},b.prototype.copyTo=function(t){for(var e=this.t-1;0<=e;--e)t[e]=this[e];t.t=this.t,t.s=this.s},b.prototype.fromInt=function(t){this.t=1,this.s=t<0?-1:0,0<t?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},b.prototype.fromString=function(t,e){var i;if(16==e)i=4;else if(8==e)i=3;else if(256==e)i=8;else if(2==e)i=1;else if(32==e)i=5;else{if(4!=e)return void this.fromRadix(t,e);i=2}this.t=0,this.s=0;for(var r=t.length,n=!1,s=0;0<=--r;){var o=8==i?255&+t[r]:C(t,r);o<0?\"-\"==t.charAt(r)&&(n=!0):(n=!1,0==s?this[this.t++]=o:s+i>this.DB?(this[this.t-1]|=(o&(1<<this.DB-s)-1)<<s,this[this.t++]=o>>this.DB-s):this[this.t-1]|=o<<s,(s+=i)>=this.DB&&(s-=this.DB))}8==i&&0!=(128&+t[0])&&(this.s=-1,0<s&&(this[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),n&&b.ZERO.subTo(this,this)},b.prototype.clamp=function(){for(var t=this.s&this.DM;0<this.t&&this[this.t-1]==t;)--this.t},b.prototype.dlShiftTo=function(t,e){var i;for(i=this.t-1;0<=i;--i)e[i+t]=this[i];for(i=t-1;0<=i;--i)e[i]=0;e.t=this.t+t,e.s=this.s},b.prototype.drShiftTo=function(t,e){for(var i=t;i<this.t;++i)e[i-t]=this[i];e.t=Math.max(this.t-t,0),e.s=this.s},b.prototype.lShiftTo=function(t,e){for(var i=t%this.DB,r=this.DB-i,n=(1<<r)-1,s=Math.floor(t/this.DB),o=this.s<<i&this.DM,h=this.t-1;0<=h;--h)e[h+s+1]=this[h]>>r|o,o=(this[h]&n)<<i;for(h=s-1;0<=h;--h)e[h]=0;e[s]=o,e.t=this.t+s+1,e.s=this.s,e.clamp()},b.prototype.rShiftTo=function(t,e){e.s=this.s;var i=Math.floor(t/this.DB);if(i>=this.t)e.t=0;else{var r=t%this.DB,n=this.DB-r,s=(1<<r)-1;e[0]=this[i]>>r;for(var o=i+1;o<this.t;++o)e[o-i-1]|=(this[o]&s)<<n,e[o-i]=this[o]>>r;0<r&&(e[this.t-i-1]|=(this.s&s)<<n),e.t=this.t-i,e.clamp()}},b.prototype.subTo=function(t,e){for(var i=0,r=0,n=Math.min(t.t,this.t);i<n;)r+=this[i]-t[i],e[i++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r-=t.s;i<this.t;)r+=this[i],e[i++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;i<t.t;)r-=t[i],e[i++]=r&this.DM,r>>=this.DB;r-=t.s}e.s=r<0?-1:0,r<-1?e[i++]=this.DV+r:0<r&&(e[i++]=r),e.t=i,e.clamp()},b.prototype.multiplyTo=function(t,e){var i=this.abs(),r=t.abs(),n=i.t;for(e.t=n+r.t;0<=--n;)e[n]=0;for(n=0;n<r.t;++n)e[n+i.t]=i.am(0,r[n],e,n,0,i.t);e.s=0,e.clamp(),this.s!=t.s&&b.ZERO.subTo(e,e)},b.prototype.squareTo=function(t){for(var e=this.abs(),i=t.t=2*e.t;0<=--i;)t[i]=0;for(i=0;i<e.t-1;++i){var r=e.am(i,e[i],t,2*i,0,1);(t[i+e.t]+=e.am(i+1,2*e[i],t,2*i+1,r,e.t-i-1))>=e.DV&&(t[i+e.t]-=e.DV,t[i+e.t+1]=1)}0<t.t&&(t[t.t-1]+=e.am(i,e[i],t,2*i,0,1)),t.s=0,t.clamp()},b.prototype.divRemTo=function(t,e,i){var r=t.abs();if(!(r.t<=0)){var n=this.abs();if(n.t<r.t)return null!=e&&e.fromInt(0),void(null!=i&&this.copyTo(i));null==i&&(i=M());var s=M(),o=this.s,h=t.s,a=this.DB-U(r[r.t-1]);0<a?(r.lShiftTo(a,s),n.lShiftTo(a,i)):(r.copyTo(s),n.copyTo(i));var u=s.t,c=s[u-1];if(0!=c){var f=c*(1<<this.F1)+(1<u?s[u-2]>>this.F2:0),l=this.FV/f,p=(1<<this.F1)/f,g=1<<this.F2,d=i.t,v=d-u,m=null==e?M():e;for(s.dlShiftTo(v,m),0<=i.compareTo(m)&&(i[i.t++]=1,i.subTo(m,i)),b.ONE.dlShiftTo(u,m),m.subTo(s,s);s.t<u;)s[s.t++]=0;for(;0<=--v;){var y=i[--d]==c?this.DM:Math.floor(i[d]*l+(i[d-1]+g)*p);if((i[d]+=s.am(0,y,i,v,0,u))<y)for(s.dlShiftTo(v,m),i.subTo(m,i);i[d]<--y;)i.subTo(m,i)}null!=e&&(i.drShiftTo(u,e),o!=h&&b.ZERO.subTo(e,e)),i.t=u,i.clamp(),0<a&&i.rShiftTo(a,i),o<0&&b.ZERO.subTo(i,i)}}},b.prototype.invDigit=function(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return 0<(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)?this.DV-e:-e},b.prototype.isEven=function(){return 0==(0<this.t?1&this[0]:this.s)},b.prototype.exp=function(t,e){if(4294967295<t||t<1)return b.ONE;var i=M(),r=M(),n=e.convert(this),s=U(t)-1;for(n.copyTo(i);0<=--s;)if(e.sqrTo(i,r),0<(t&1<<s))e.mulTo(r,n,i);else{var o=i;i=r,r=o}return e.revert(i)},b.prototype.chunkSize=function(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},b.prototype.toRadix=function(t){if(null==t&&(t=10),0==this.signum()||t<2||36<t)return\"0\";var e=this.chunkSize(t),i=Math.pow(t,e),r=F(i),n=M(),s=M(),o=\"\";for(this.divRemTo(r,n,s);0<n.signum();)o=(i+s.intValue()).toString(t).substr(1)+o,n.divRemTo(r,n,s);return s.intValue().toString(t)+o},b.prototype.fromRadix=function(t,e){this.fromInt(0),null==e&&(e=10);for(var i=this.chunkSize(e),r=Math.pow(e,i),n=!1,s=0,o=0,h=0;h<t.length;++h){var a=C(t,h);a<0?\"-\"==t.charAt(h)&&0==this.signum()&&(n=!0):(o=e*o+a,++s>=i&&(this.dMultiply(r),this.dAddOffset(o,0),o=s=0))}0<s&&(this.dMultiply(Math.pow(e,s)),this.dAddOffset(o,0)),n&&b.ZERO.subTo(this,this)},b.prototype.fromNumber=function(t,e,i){if(\"number\"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,i),this.testBit(t-1)||this.bitwiseTo(b.ONE.shiftLeft(t-1),u,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(b.ONE.shiftLeft(t-1),this);else{var r=[],n=7&t;r.length=1+(t>>3),e.nextBytes(r),0<n?r[0]&=(1<<n)-1:r[0]=0,this.fromString(r,256)}},b.prototype.bitwiseTo=function(t,e,i){var r,n,s=Math.min(t.t,this.t);for(r=0;r<s;++r)i[r]=e(this[r],t[r]);if(t.t<this.t){for(n=t.s&this.DM,r=s;r<this.t;++r)i[r]=e(this[r],n);i.t=this.t}else{for(n=this.s&this.DM,r=s;r<t.t;++r)i[r]=e(n,t[r]);i.t=t.t}i.s=e(this.s,t.s),i.clamp()},b.prototype.changeBit=function(t,e){var i=b.ONE.shiftLeft(t);return this.bitwiseTo(i,e,i),i},b.prototype.addTo=function(t,e){for(var i=0,r=0,n=Math.min(t.t,this.t);i<n;)r+=this[i]+t[i],e[i++]=r&this.DM,r>>=this.DB;if(t.t<this.t){for(r+=t.s;i<this.t;)r+=this[i],e[i++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;i<t.t;)r+=t[i],e[i++]=r&this.DM,r>>=this.DB;r+=t.s}e.s=r<0?-1:0,0<r?e[i++]=r:r<-1&&(e[i++]=this.DV+r),e.t=i,e.clamp()},b.prototype.dMultiply=function(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},b.prototype.dAddOffset=function(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},b.prototype.multiplyLowerTo=function(t,e,i){var r=Math.min(this.t+t.t,e);for(i.s=0,i.t=r;0<r;)i[--r]=0;for(var n=i.t-this.t;r<n;++r)i[r+this.t]=this.am(0,t[r],i,r,0,this.t);for(n=Math.min(t.t,e);r<n;++r)this.am(0,t[r],i,r,0,e-r);i.clamp()},b.prototype.multiplyUpperTo=function(t,e,i){--e;var r=i.t=this.t+t.t-e;for(i.s=0;0<=--r;)i[r]=0;for(r=Math.max(e-this.t,0);r<t.t;++r)i[this.t+r-e]=this.am(e-r,t[r],i,0,0,this.t+r-e);i.clamp(),i.drShiftTo(1,i)},b.prototype.modInt=function(t){if(t<=0)return 0;var e=this.DV%t,i=this.s<0?t-1:0;if(0<this.t)if(0==e)i=this[0]%t;else for(var r=this.t-1;0<=r;--r)i=(e*i+this[r])%t;return i},b.prototype.millerRabin=function(t){var e=this.subtract(b.ONE),i=e.getLowestSetBit();if(i<=0)return!1;var r=e.shiftRight(i);B.length<(t=t+1>>1)&&(t=B.length);for(var n=M(),s=0;s<t;++s){n.fromInt(B[Math.floor(Math.random()*B.length)]);var o=n.modPow(r,this);if(0!=o.compareTo(b.ONE)&&0!=o.compareTo(e)){for(var h=1;h++<i&&0!=o.compareTo(e);)if(0==(o=o.modPowInt(2,this)).compareTo(b.ONE))return!1;if(0!=o.compareTo(e))return!1}}return!0},b.prototype.square=function(){var t=M();return this.squareTo(t),t},b.prototype.gcda=function(t,e){var i=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(i.compareTo(r)<0){var n=i;i=r,r=n}var s=i.getLowestSetBit(),o=r.getLowestSetBit();if(o<0)e(i);else{s<o&&(o=s),0<o&&(i.rShiftTo(o,i),r.rShiftTo(o,r));var h=function(){0<(s=i.getLowestSetBit())&&i.rShiftTo(s,i),0<(s=r.getLowestSetBit())&&r.rShiftTo(s,r),0<=i.compareTo(r)?(i.subTo(r,i),i.rShiftTo(1,i)):(r.subTo(i,r),r.rShiftTo(1,r)),0<i.signum()?setTimeout(h,0):(0<o&&r.lShiftTo(o,r),setTimeout(function(){e(r)},0))};setTimeout(h,10)}},b.prototype.fromNumberAsync=function(t,e,i,r){if(\"number\"==typeof e)if(t<2)this.fromInt(1);else{this.fromNumber(t,i),this.testBit(t-1)||this.bitwiseTo(b.ONE.shiftLeft(t-1),u,this),this.isEven()&&this.dAddOffset(1,0);var n=this,s=function(){n.dAddOffset(2,0),n.bitLength()>t&&n.subTo(b.ONE.shiftLeft(t-1),n),n.isProbablePrime(e)?setTimeout(function(){r()},0):setTimeout(s,0)};setTimeout(s,0)}else{var o=[],h=7&t;o.length=1+(t>>3),e.nextBytes(o),0<h?o[0]&=(1<<h)-1:o[0]=0,this.fromString(o,256)}},b}(),V=function(){function t(){}return t.prototype.convert=function(t){return t},t.prototype.revert=function(t){return t},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i)},t.prototype.sqrTo=function(t,e){t.squareTo(e)},t}(),I=function(){function t(t){this.m=t}return t.prototype.convert=function(t){return t.s<0||0<=t.compareTo(this.m)?t.mod(this.m):t},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){t.divRemTo(this.m,null,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),N=function(){function t(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}return t.prototype.convert=function(t){var e=M();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&0<e.compareTo(O.ZERO)&&this.m.subTo(e,e),e},t.prototype.revert=function(t){var e=M();return t.copyTo(e),this.reduce(e),e},t.prototype.reduce=function(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var i=32767&t[e],r=i*this.mpl+((i*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[i=e+this.m.t]+=this.m.am(0,r,t,e,0,this.m.t);t[i]>=t.DV;)t[i]-=t.DV,t[++i]++}t.clamp(),t.drShiftTo(this.m.t,t),0<=t.compareTo(this.m)&&t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}(),P=function(){function t(t){this.m=t,this.r2=M(),this.q3=M(),O.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t)}return t.prototype.convert=function(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=M();return t.copyTo(e),this.reduce(e),e},t.prototype.revert=function(t){return t},t.prototype.reduce=function(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);0<=t.compareTo(this.m);)t.subTo(this.m,t)},t.prototype.mulTo=function(t,e,i){t.multiplyTo(e,i),this.reduce(i)},t.prototype.sqrTo=function(t,e){t.squareTo(e),this.reduce(e)},t}();function M(){return new O(null)}function q(t,e){return new O(t,e)}\"Microsoft Internet Explorer\"==navigator.appName?(O.prototype.am=function(t,e,i,r,n,s){for(var o=32767&e,h=e>>15;0<=--s;){var a=32767&this[t],u=this[t++]>>15,c=h*a+u*o;n=((a=o*a+((32767&c)<<15)+i[r]+(1073741823&n))>>>30)+(c>>>15)+h*u+(n>>>30),i[r++]=1073741823&a}return n},w=30):\"Netscape\"!=navigator.appName?(O.prototype.am=function(t,e,i,r,n,s){for(;0<=--s;){var o=e*this[t++]+i[r]+n;n=Math.floor(o/67108864),i[r++]=67108863&o}return n},w=26):(O.prototype.am=function(t,e,i,r,n,s){for(var o=16383&e,h=e>>14;0<=--s;){var a=16383&this[t],u=this[t++]>>14,c=h*a+u*o;n=((a=o*a+((16383&c)<<14)+i[r]+n)>>28)+(c>>14)+h*u,i[r++]=268435455&a}return n},w=28),O.prototype.DB=w,O.prototype.DM=(1<<w)-1,O.prototype.DV=1<<w;O.prototype.FV=Math.pow(2,52),O.prototype.F1=52-w,O.prototype.F2=2*w-52;var j,L,H=[];for(j=\"0\".charCodeAt(0),L=0;L<=9;++L)H[j++]=L;for(j=\"a\".charCodeAt(0),L=10;L<36;++L)H[j++]=L;for(j=\"A\".charCodeAt(0),L=10;L<36;++L)H[j++]=L;function C(t,e){var i=H[t.charCodeAt(e)];return null==i?-1:i}function F(t){var e=M();return e.fromInt(t),e}function U(t){var e,i=1;return 0!=(e=t>>>16)&&(t=e,i+=16),0!=(e=t>>8)&&(t=e,i+=8),0!=(e=t>>4)&&(t=e,i+=4),0!=(e=t>>2)&&(t=e,i+=2),0!=(e=t>>1)&&(t=e,i+=1),i}O.ZERO=F(0),O.ONE=F(1);var K=function(){function t(){this.i=0,this.j=0,this.S=[]}return t.prototype.init=function(t){var e,i,r;for(e=0;e<256;++e)this.S[e]=e;for(e=i=0;e<256;++e)i=i+this.S[e]+t[e%t.length]&255,r=this.S[e],this.S[e]=this.S[i],this.S[i]=r;this.i=0,this.j=0},t.prototype.next=function(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]},t}();var k,_,z=256,Z=null;if(null==Z){Z=[];var G=void(_=0);if(window.crypto&&window.crypto.getRandomValues){var $=new Uint32Array(256);for(window.crypto.getRandomValues($),G=0;G<$.length;++G)Z[_++]=255&$[G]}var Y=function(t){if(this.count=this.count||0,256<=this.count||z<=_)window.removeEventListener?window.removeEventListener(\"mousemove\",Y,!1):window.detachEvent&&window.detachEvent(\"onmousemove\",Y);else try{var e=t.x+t.y;Z[_++]=255&e,this.count+=1}catch(t){}};window.addEventListener?window.addEventListener(\"mousemove\",Y,!1):window.attachEvent&&window.attachEvent(\"onmousemove\",Y)}function J(){if(null==k){for(k=new K;_<z;){var t=Math.floor(65536*Math.random());Z[_++]=255&t}for(k.init(Z),_=0;_<Z.length;++_)Z[_]=0;_=0}return k.next()}var X=function(){function t(){}return t.prototype.nextBytes=function(t){for(var e=0;e<t.length;++e)t[e]=J()},t}();var Q=function(){function t(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}return t.prototype.doPublic=function(t){return t.modPowInt(this.e,this.n)},t.prototype.doPrivate=function(t){if(null==this.p||null==this.q)return t.modPow(this.d,this.n);for(var e=t.mod(this.p).modPow(this.dmp1,this.p),i=t.mod(this.q).modPow(this.dmq1,this.q);e.compareTo(i)<0;)e=e.add(this.p);return e.subtract(i).multiply(this.coeff).mod(this.p).multiply(this.q).add(i)},t.prototype.setPublic=function(t,e){null!=t&&null!=e&&0<t.length&&0<e.length?(this.n=q(t,16),this.e=parseInt(e,16)):console.error(\"Invalid RSA public key\")},t.prototype.encrypt=function(t){var e=function(t,e){if(e<t.length+11)return console.error(\"Message too long for RSA\"),null;for(var i=[],r=t.length-1;0<=r&&0<e;){var n=t.charCodeAt(r--);n<128?i[--e]=n:127<n&&n<2048?(i[--e]=63&n|128,i[--e]=n>>6|192):(i[--e]=63&n|128,i[--e]=n>>6&63|128,i[--e]=n>>12|224)}i[--e]=0;for(var s=new X,o=[];2<e;){for(o[0]=0;0==o[0];)s.nextBytes(o);i[--e]=o[0]}return i[--e]=2,i[--e]=0,new O(i)}(t,this.n.bitLength()+7>>3);if(null==e)return null;var i=this.doPublic(e);if(null==i)return null;var r=i.toString(16);return 0==(1&r.length)?r:\"0\"+r},t.prototype.setPrivate=function(t,e,i){null!=t&&null!=e&&0<t.length&&0<e.length?(this.n=q(t,16),this.e=parseInt(e,16),this.d=q(i,16)):console.error(\"Invalid RSA private key\")},t.prototype.setPrivateEx=function(t,e,i,r,n,s,o,h){null!=t&&null!=e&&0<t.length&&0<e.length?(this.n=q(t,16),this.e=parseInt(e,16),this.d=q(i,16),this.p=q(r,16),this.q=q(n,16),this.dmp1=q(s,16),this.dmq1=q(o,16),this.coeff=q(h,16)):console.error(\"Invalid RSA private key\")},t.prototype.generate=function(t,e){var i=new X,r=t>>1;this.e=parseInt(e,16);for(var n=new O(e,16);;){for(;this.p=new O(t-r,1,i),0!=this.p.subtract(O.ONE).gcd(n).compareTo(O.ONE)||!this.p.isProbablePrime(10););for(;this.q=new O(r,1,i),0!=this.q.subtract(O.ONE).gcd(n).compareTo(O.ONE)||!this.q.isProbablePrime(10););if(this.p.compareTo(this.q)<=0){var s=this.p;this.p=this.q,this.q=s}var o=this.p.subtract(O.ONE),h=this.q.subtract(O.ONE),a=o.multiply(h);if(0==a.gcd(n).compareTo(O.ONE)){this.n=this.p.multiply(this.q),this.d=n.modInverse(a),this.dmp1=this.d.mod(o),this.dmq1=this.d.mod(h),this.coeff=this.q.modInverse(this.p);break}}},t.prototype.decrypt=function(t){var e=q(t,16),i=this.doPrivate(e);return null==i?null:function(t,e){var i=t.toByteArray(),r=0;for(;r<i.length&&0==i[r];)++r;if(i.length-r!=e-1||2!=i[r])return null;++r;for(;0!=i[r];)if(++r>=i.length)return null;var n=\"\";for(;++r<i.length;){var s=255&i[r];s<128?n+=String.fromCharCode(s):191<s&&s<224?(n+=String.fromCharCode((31&s)<<6|63&i[r+1]),++r):(n+=String.fromCharCode((15&s)<<12|(63&i[r+1])<<6|63&i[r+2]),r+=2)}return n}(i,this.n.bitLength()+7>>3)},t.prototype.generateAsync=function(t,e,n){var s=new X,o=t>>1;this.e=parseInt(e,16);var h=new O(e,16),a=this,u=function(){var e=function(){if(a.p.compareTo(a.q)<=0){var t=a.p;a.p=a.q,a.q=t}var e=a.p.subtract(O.ONE),i=a.q.subtract(O.ONE),r=e.multiply(i);0==r.gcd(h).compareTo(O.ONE)?(a.n=a.p.multiply(a.q),a.d=h.modInverse(r),a.dmp1=a.d.mod(e),a.dmq1=a.d.mod(i),a.coeff=a.q.modInverse(a.p),setTimeout(function(){n()},0)):setTimeout(u,0)},i=function(){a.q=M(),a.q.fromNumberAsync(o,1,s,function(){a.q.subtract(O.ONE).gcda(h,function(t){0==t.compareTo(O.ONE)&&a.q.isProbablePrime(10)?setTimeout(e,0):setTimeout(i,0)})})},r=function(){a.p=M(),a.p.fromNumberAsync(t-o,1,s,function(){a.p.subtract(O.ONE).gcda(h,function(t){0==t.compareTo(O.ONE)&&a.p.isProbablePrime(10)?setTimeout(i,0):setTimeout(r,0)})})};setTimeout(r,0)};setTimeout(u,0)},t.prototype.sign=function(t,e,i){var r=function(t,e){if(e<t.length+22)return console.error(\"Message too long for RSA\"),null;for(var i=e-t.length-6,r=\"\",n=0;n<i;n+=2)r+=\"ff\";return q(\"0001\"+r+\"00\"+t,16)}((W[i]||\"\")+e(t).toString(),this.n.bitLength()/4);if(null==r)return null;var n=this.doPrivate(r);if(null==n)return null;var s=n.toString(16);return 0==(1&s.length)?s:\"0\"+s},t.prototype.verify=function(t,e,i){var r=q(e,16),n=this.doPublic(r);return null==n?null:function(t){for(var e in W)if(W.hasOwnProperty(e)){var i=W[e],r=i.length;if(t.substr(0,r)==i)return t.substr(r)}return t}(n.toString(16).replace(/^1f+00/,\"\"))==i(t).toString()},t}();var W={md2:\"3020300c06082a864886f70d020205000410\",md5:\"3020300c06082a864886f70d020505000410\",sha1:\"3021300906052b0e03021a05000414\",sha224:\"302d300d06096086480165030402040500041c\",sha256:\"3031300d060960864801650304020105000420\",sha384:\"3041300d060960864801650304020205000430\",sha512:\"3051300d060960864801650304020305000440\",ripemd160:\"3021300906052b2403020105000414\"};var tt={};tt.lang={extend:function(t,e,i){if(!e||!t)throw new Error(\"YAHOO.lang.extend failed, please check that all dependencies are included.\");var r=function(){};if(r.prototype=e.prototype,t.prototype=new r,(t.prototype.constructor=t).superclass=e.prototype,e.prototype.constructor==Object.prototype.constructor&&(e.prototype.constructor=e),i){var n;for(n in i)t.prototype[n]=i[n];var s=function(){},o=[\"toString\",\"valueOf\"];try{/MSIE/.test(navigator.userAgent)&&(s=function(t,e){for(n=0;n<o.length;n+=1){var i=o[n],r=e[i];\"function\"==typeof r&&r!=Object.prototype[i]&&(t[i]=r)}})}catch(t){}s(t.prototype,i)}}};var et={};void 0!==et.asn1&&et.asn1||(et.asn1={}),et.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e=\"0\"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if(\"-\"!=e.substr(0,1))e.length%2==1?e=\"0\"+e:e.match(/^[0-7]/)||(e=\"00\"+e);else{var i=e.substr(1).length;i%2==1?i+=1:e.match(/^[0-7]/)||(i+=2);for(var r=\"\",n=0;n<i;n++)r+=\"f\";e=new O(r,16).xor(t).add(O.ONE).toString(16).replace(/^-/,\"\")}return e},this.getPEMStringFromHex=function(t,e){return hextopem(t,e)},this.newObject=function(t){var e=et.asn1,i=e.DERBoolean,r=e.DERInteger,n=e.DERBitString,s=e.DEROctetString,o=e.DERNull,h=e.DERObjectIdentifier,a=e.DEREnumerated,u=e.DERUTF8String,c=e.DERNumericString,f=e.DERPrintableString,l=e.DERTeletexString,p=e.DERIA5String,g=e.DERUTCTime,d=e.DERGeneralizedTime,v=e.DERSequence,m=e.DERSet,y=e.DERTaggedObject,b=e.ASN1Util.newObject,T=Object.keys(t);if(1!=T.length)throw\"key of param shall be only one.\";var S=T[0];if(-1==\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\"+S+\":\"))throw\"undefined key: \"+S;if(\"bool\"==S)return new i(t[S]);if(\"int\"==S)return new r(t[S]);if(\"bitstr\"==S)return new n(t[S]);if(\"octstr\"==S)return new s(t[S]);if(\"null\"==S)return new o(t[S]);if(\"oid\"==S)return new h(t[S]);if(\"enum\"==S)return new a(t[S]);if(\"utf8str\"==S)return new u(t[S]);if(\"numstr\"==S)return new c(t[S]);if(\"prnstr\"==S)return new f(t[S]);if(\"telstr\"==S)return new l(t[S]);if(\"ia5str\"==S)return new p(t[S]);if(\"utctime\"==S)return new g(t[S]);if(\"gentime\"==S)return new d(t[S]);if(\"seq\"==S){for(var E=t[S],w=[],D=0;D<E.length;D++){var x=b(E[D]);w.push(x)}return new v({array:w})}if(\"set\"==S){for(E=t[S],w=[],D=0;D<E.length;D++){x=b(E[D]);w.push(x)}return new m({array:w})}if(\"tag\"==S){var R=t[S];if(\"[object Array]\"===Object.prototype.toString.call(R)&&3==R.length){var B=b(R[2]);return new y({tag:R[0],explicit:R[1],obj:B})}var A={};if(void 0!==R.explicit&&(A.explicit=R.explicit),void 0!==R.tag&&(A.tag=R.tag),void 0===R.obj)throw\"obj shall be specified for 'tag'.\";return A.obj=b(R.obj),new y(A)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},et.asn1.ASN1Util.oidHexToInt=function(t){for(var e=\"\",i=parseInt(t.substr(0,2),16),r=(e=Math.floor(i/40)+\".\"+i%40,\"\"),n=2;n<t.length;n+=2){var s=(\"00000000\"+parseInt(t.substr(n,2),16).toString(2)).slice(-8);if(r+=s.substr(1,7),\"0\"==s.substr(0,1))e=e+\".\"+new O(r,2).toString(10),r=\"\"}return e},et.asn1.ASN1Util.oidIntToHex=function(t){var h=function(t){var e=t.toString(16);return 1==e.length&&(e=\"0\"+e),e},e=function(t){var e=\"\",i=new O(t,10).toString(2),r=7-i.length%7;7==r&&(r=0);for(var n=\"\",s=0;s<r;s++)n+=\"0\";i=n+i;for(s=0;s<i.length-1;s+=7){var o=i.substr(s,7);s!=i.length-7&&(o=\"1\"+o),e+=h(parseInt(o,2))}return e};if(!t.match(/^[0-9.]+$/))throw\"malformed oid string: \"+t;var i=\"\",r=t.split(\".\"),n=40*parseInt(r[0])+parseInt(r[1]);i+=h(n),r.splice(0,2);for(var s=0;s<r.length;s++)i+=e(r[s]);return i},et.asn1.ASN1Object=function(){this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw\"this.hV is null or undefined.\";if(this.hV.length%2==1)throw\"value hex must be even length: n=\"+\"\".length+\",v=\"+this.hV;var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e=\"0\"+e),t<128)return e;var i=e.length/2;if(15<i)throw\"ASN.1 length too long to represent by 8x: n = \"+t.toString(16);return(128+i).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return\"\"}},et.asn1.DERAbstractString=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(this.s)},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},tt.lang.extend(et.asn1.DERAbstractString,et.asn1.ASN1Object),et.asn1.DERAbstractTime=function(t){et.asn1.DERAbstractTime.superclass.constructor.call(this),this.localDateToUTC=function(t){return utc=t.getTime()+6e4*t.getTimezoneOffset(),new Date(utc)},this.formatDate=function(t,e,i){var r=this.zeroPadding,n=this.localDateToUTC(t),s=String(n.getFullYear());\"utc\"==e&&(s=s.substr(2,2));var o=s+r(String(n.getMonth()+1),2)+r(String(n.getDate()),2)+r(String(n.getHours()),2)+r(String(n.getMinutes()),2)+r(String(n.getSeconds()),2);if(!0===i){var h=n.getMilliseconds();if(0!=h){var a=r(String(h),3);o=o+\".\"+(a=a.replace(/[0]+$/,\"\"))}}return o+\"Z\"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join(\"0\")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=stohex(t)},this.setByDateValue=function(t,e,i,r,n,s){var o=new Date(Date.UTC(t,e-1,i,r,n,s,0));this.setByDate(o)},this.getFreshValueHex=function(){return this.hV}},tt.lang.extend(et.asn1.DERAbstractTime,et.asn1.ASN1Object),et.asn1.DERAbstractStructured=function(t){et.asn1.DERAbstractString.superclass.constructor.call(this),this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},tt.lang.extend(et.asn1.DERAbstractStructured,et.asn1.ASN1Object),et.asn1.DERBoolean=function(){et.asn1.DERBoolean.superclass.constructor.call(this),this.hT=\"01\",this.hTLV=\"0101ff\"},tt.lang.extend(et.asn1.DERBoolean,et.asn1.ASN1Object),et.asn1.DERInteger=function(t){et.asn1.DERInteger.superclass.constructor.call(this),this.hT=\"02\",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new O(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):\"number\"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DERInteger,et.asn1.ASN1Object),et.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex=\"00\"+e.getEncodedHex()}et.asn1.DERBitString.superclass.constructor.call(this),this.hT=\"03\",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw\"unused bits shall be from 0 to 7: u = \"+t;var i=\"0\"+t;this.hTLV=null,this.isModified=!0,this.hV=i+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,\"\")).length%8;8==e&&(e=0);for(var i=0;i<=e;i++)t+=\"0\";var r=\"\";for(i=0;i<t.length-1;i+=8){var n=t.substr(i,8),s=parseInt(n,2).toString(16);1==s.length&&(s=\"0\"+s),r+=s}this.hTLV=null,this.isModified=!0,this.hV=\"0\"+e+r},this.setByBooleanArray=function(t){for(var e=\"\",i=0;i<t.length;i++)1==t[i]?e+=\"1\":e+=\"0\";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),i=0;i<t;i++)e[i]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},tt.lang.extend(et.asn1.DERBitString,et.asn1.ASN1Object),et.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=et.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}et.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT=\"04\"},tt.lang.extend(et.asn1.DEROctetString,et.asn1.DERAbstractString),et.asn1.DERNull=function(){et.asn1.DERNull.superclass.constructor.call(this),this.hT=\"05\",this.hTLV=\"0500\"},tt.lang.extend(et.asn1.DERNull,et.asn1.ASN1Object),et.asn1.DERObjectIdentifier=function(t){var h=function(t){var e=t.toString(16);return 1==e.length&&(e=\"0\"+e),e},s=function(t){var e=\"\",i=new O(t,10).toString(2),r=7-i.length%7;7==r&&(r=0);for(var n=\"\",s=0;s<r;s++)n+=\"0\";i=n+i;for(s=0;s<i.length-1;s+=7){var o=i.substr(s,7);s!=i.length-7&&(o=\"1\"+o),e+=h(parseInt(o,2))}return e};et.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT=\"06\",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){if(!t.match(/^[0-9.]+$/))throw\"malformed oid string: \"+t;var e=\"\",i=t.split(\".\"),r=40*parseInt(i[0])+parseInt(i[1]);e+=h(r),i.splice(0,2);for(var n=0;n<i.length;n++)e+=s(i[n]);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=e},this.setValueName=function(t){var e=et.asn1.x509.OID.name2oid(t);if(\"\"===e)throw\"DERObjectIdentifier oidName undefined: \"+t;this.setValueOidString(e)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(\"string\"==typeof t?t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t):void 0!==t.oid?this.setValueOidString(t.oid):void 0!==t.hex?this.setValueHex(t.hex):void 0!==t.name&&this.setValueName(t.name))},tt.lang.extend(et.asn1.DERObjectIdentifier,et.asn1.ASN1Object),et.asn1.DEREnumerated=function(t){et.asn1.DEREnumerated.superclass.constructor.call(this),this.hT=\"0a\",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=et.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new O(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):\"number\"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},tt.lang.extend(et.asn1.DEREnumerated,et.asn1.ASN1Object),et.asn1.DERUTF8String=function(t){et.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT=\"0c\"},tt.lang.extend(et.asn1.DERUTF8String,et.asn1.DERAbstractString),et.asn1.DERNumericString=function(t){et.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT=\"12\"},tt.lang.extend(et.asn1.DERNumericString,et.asn1.DERAbstractString),et.asn1.DERPrintableString=function(t){et.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT=\"13\"},tt.lang.extend(et.asn1.DERPrintableString,et.asn1.DERAbstractString),et.asn1.DERTeletexString=function(t){et.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT=\"14\"},tt.lang.extend(et.asn1.DERTeletexString,et.asn1.DERAbstractString),et.asn1.DERIA5String=function(t){et.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT=\"16\"},tt.lang.extend(et.asn1.DERIA5String,et.asn1.DERAbstractString),et.asn1.DERUTCTime=function(t){et.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT=\"17\",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"utc\"),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):\"string\"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},tt.lang.extend(et.asn1.DERUTCTime,et.asn1.DERAbstractTime),et.asn1.DERGeneralizedTime=function(t){et.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT=\"18\",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,\"gen\",this.withMillis),this.hV=stohex(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):\"string\"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},tt.lang.extend(et.asn1.DERGeneralizedTime,et.asn1.DERAbstractTime),et.asn1.DERSequence=function(t){et.asn1.DERSequence.superclass.constructor.call(this,t),this.hT=\"30\",this.getFreshValueHex=function(){for(var t=\"\",e=0;e<this.asn1Array.length;e++){t+=this.asn1Array[e].getEncodedHex()}return this.hV=t,this.hV}},tt.lang.extend(et.asn1.DERSequence,et.asn1.DERAbstractStructured),et.asn1.DERSet=function(t){et.asn1.DERSet.superclass.constructor.call(this,t),this.hT=\"31\",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var i=this.asn1Array[e];t.push(i.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(\"\"),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},tt.lang.extend(et.asn1.DERSet,et.asn1.DERAbstractStructured),et.asn1.DERTaggedObject=function(t){et.asn1.DERTaggedObject.superclass.constructor.call(this),this.hT=\"a0\",this.hV=\"\",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,i){this.hT=e,this.isExplicit=t,this.asn1Object=i,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=i.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.tag&&(this.hT=t.tag),void 0!==t.explicit&&(this.isExplicit=t.explicit),void 0!==t.obj&&(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},tt.lang.extend(et.asn1.DERTaggedObject,et.asn1.ASN1Object);var it=function(i){function r(t){var e=i.call(this)||this;return t&&(\"string\"==typeof t?e.parseKey(t):(r.hasPrivateKeyProperty(t)||r.hasPublicKeyProperty(t))&&e.parsePropertiesFrom(t)),e}return function(t,e){function i(){this.constructor=t}p(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}(r,i),r.prototype.parseKey=function(t){try{var e=0,i=0,r=/^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/.test(t)?d(t):v.unarmor(t),n=x.decode(r);if(3===n.sub.length&&(n=n.sub[2].sub[0]),9===n.sub.length){e=n.sub[1].getHexStringValue(),this.n=q(e,16),i=n.sub[2].getHexStringValue(),this.e=parseInt(i,16);var s=n.sub[3].getHexStringValue();this.d=q(s,16);var o=n.sub[4].getHexStringValue();this.p=q(o,16);var h=n.sub[5].getHexStringValue();this.q=q(h,16);var a=n.sub[6].getHexStringValue();this.dmp1=q(a,16);var u=n.sub[7].getHexStringValue();this.dmq1=q(u,16);var c=n.sub[8].getHexStringValue();this.coeff=q(c,16)}else{if(2!==n.sub.length)return!1;var f=n.sub[1].sub[0];e=f.sub[0].getHexStringValue(),this.n=q(e,16),i=f.sub[1].getHexStringValue(),this.e=parseInt(i,16)}return!0}catch(t){return!1}},r.prototype.getPrivateBaseKey=function(){var t={array:[new et.asn1.DERInteger({int:0}),new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e}),new et.asn1.DERInteger({bigint:this.d}),new et.asn1.DERInteger({bigint:this.p}),new et.asn1.DERInteger({bigint:this.q}),new et.asn1.DERInteger({bigint:this.dmp1}),new et.asn1.DERInteger({bigint:this.dmq1}),new et.asn1.DERInteger({bigint:this.coeff})]};return new et.asn1.DERSequence(t).getEncodedHex()},r.prototype.getPrivateBaseKeyB64=function(){return c(this.getPrivateBaseKey())},r.prototype.getPublicBaseKey=function(){var t=new et.asn1.DERSequence({array:[new et.asn1.DERObjectIdentifier({oid:\"1.2.840.113549.1.1.1\"}),new et.asn1.DERNull]}),e=new et.asn1.DERSequence({array:[new et.asn1.DERInteger({bigint:this.n}),new et.asn1.DERInteger({int:this.e})]}),i=new et.asn1.DERBitString({hex:\"00\"+e.getEncodedHex()});return new et.asn1.DERSequence({array:[t,i]}).getEncodedHex()},r.prototype.getPublicBaseKeyB64=function(){return c(this.getPublicBaseKey())},r.wordwrap=function(t,e){if(!t)return t;var i=\"(.{1,\"+(e=e||64)+\"})( +|$\\n?)|(.{1,\"+e+\"})\";return t.match(RegExp(i,\"g\")).join(\"\\n\")},r.prototype.getPrivateKey=function(){var t=\"-----BEGIN RSA PRIVATE KEY-----\\n\";return t+=r.wordwrap(this.getPrivateBaseKeyB64())+\"\\n\",t+=\"-----END RSA PRIVATE KEY-----\"},r.prototype.getPublicKey=function(){var t=\"-----BEGIN PUBLIC KEY-----\\n\";return t+=r.wordwrap(this.getPublicBaseKeyB64())+\"\\n\",t+=\"-----END PUBLIC KEY-----\"},r.hasPublicKeyProperty=function(t){return(t=t||{}).hasOwnProperty(\"n\")&&t.hasOwnProperty(\"e\")},r.hasPrivateKeyProperty=function(t){return(t=t||{}).hasOwnProperty(\"n\")&&t.hasOwnProperty(\"e\")&&t.hasOwnProperty(\"d\")&&t.hasOwnProperty(\"p\")&&t.hasOwnProperty(\"q\")&&t.hasOwnProperty(\"dmp1\")&&t.hasOwnProperty(\"dmq1\")&&t.hasOwnProperty(\"coeff\")},r.prototype.parsePropertiesFrom=function(t){this.n=t.n,this.e=t.e,t.hasOwnProperty(\"d\")&&(this.d=t.d,this.p=t.p,this.q=t.q,this.dmp1=t.dmp1,this.dmq1=t.dmq1,this.coeff=t.coeff)},r}(Q),rt=function(){function t(t){t=t||{},this.default_key_size=parseInt(t.default_key_size,10)||1024,this.default_public_exponent=t.default_public_exponent||\"010001\",this.log=t.log||!1,this.key=null}return t.prototype.setKey=function(t){this.log&&this.key&&console.warn(\"A key was already set, overriding existing.\"),this.key=new it(t)},t.prototype.setPrivateKey=function(t){this.setKey(t)},t.prototype.setPublicKey=function(t){this.setKey(t)},t.prototype.decrypt=function(t){try{return this.getKey().decrypt(f(t))}catch(t){return!1}},t.prototype.encrypt=function(t){try{return c(this.getKey().encrypt(t))}catch(t){return!1}},t.prototype.sign=function(t,e,i){try{return c(this.getKey().sign(t,e,i))}catch(t){return!1}},t.prototype.verify=function(t,e,i){try{return this.getKey().verify(t,f(e),i)}catch(t){return!1}},t.prototype.getKey=function(t){if(!this.key){if(this.key=new it,t&&\"[object Function]\"==={}.toString.call(t))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,t);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key},t.prototype.getPrivateKey=function(){return this.getKey().getPrivateKey()},t.prototype.getPrivateKeyB64=function(){return this.getKey().getPrivateBaseKeyB64()},t.prototype.getPublicKey=function(){return this.getKey().getPublicKey()},t.prototype.getPublicKeyB64=function(){return this.getKey().getPublicBaseKeyB64()},t.version=\"3.0.0-rc.1\",t}();window.JSEncrypt=rt,t.JSEncrypt=rt,t.default=rt,Object.defineProperty(t,\"__esModule\",{value:!0})});"
		},
		{
			"key": "base_url",
			"value": "https://api.staging-form3.tech/v1"
		}
	]
}